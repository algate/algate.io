<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是一张白纸</title>
  
  <subtitle>Algate&#39;s Blog</subtitle>
  <link href="/hexo.pure/atom.xml" rel="self"/>
  
  <link href="https://algate.coding.me/"/>
  <updated>2019-02-27T03:27:59.529Z</updated>
  <id>https://algate.coding.me/</id>
  
  <author>
    <name>Algate</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3-flexbox</title>
    <link href="https://algate.coding.me/2018/12/14/CSS3-FlexBox/"/>
    <id>https://algate.coding.me/2018/12/14/CSS3-FlexBox/</id>
    <published>2018-12-14T08:35:30.000Z</published>
    <updated>2019-02-27T03:27:59.529Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><h4 id="关于flex的内容不说太多，网上太多，再次只记录如何使用了"><a href="#关于flex的内容不说太多，网上太多，再次只记录如何使用了" class="headerlink" title="关于flex的内容不说太多，网上太多，再次只记录如何使用了"></a>关于flex的内容不说太多，网上太多，再次只记录如何使用了</h4><p>只要用flex布局的，添加一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*设置body为伸缩容器*/</span><br><span class="line">display: -webkit-box;/*老版本：iOS 6-, Safari 3.1-6*/</span><br><span class="line">display: -moz-box;/*老版本：Firefox 19- */</span><br><span class="line">display: -ms-flexbox;/*混合版本：IE10*/</span><br><span class="line">display: -webkit-flex;/*新版本：Chrome*/</span><br><span class="line">display: flex;/*标准规范：Opera 12.1, Firefox 20+*/</span><br><span class="line"></span><br><span class="line">/*伸缩项目换行*/</span><br><span class="line">-moz-box-orient: vertical || horizontal;</span><br><span class="line">-webkit-box-orient: vertical || horizontal;</span><br><span class="line">-moz-box-direction: normal || reverse;</span><br><span class="line">-webkit-box-direction: normal || reverse;</span><br><span class="line">-moz-box-lines: multiple || single;</span><br><span class="line">-webkit-box-lines: multiple || single;</span><br><span class="line">-webkit-flex-flow: column wrap || row / nowrap;</span><br><span class="line">-ms-flex-flow: column wrap || row / nowrap;</span><br><span class="line">flex-flow: column wrap || row / nowrap;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 伸缩项目具体的分布方式 --&gt;</span><br><span class="line">-moz-box-pack: justify;</span><br><span class="line">-webkit-box-pack: justify;</span><br><span class="line">-ms-flex-pack: justify;</span><br><span class="line">-webkit-justify-content: space-between;</span><br><span class="line">justify-content: space-between;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 伸缩项目基线对其方式 --&gt;</span><br><span class="line">-moz-box-align: stretch || baseline || center || start || end;</span><br><span class="line">-webkit-box-align: stretch;</span><br><span class="line">-ms-flex-align: stretch;</span><br><span class="line">-webkit-align-items: stretch;</span><br><span class="line">align-items: stretch;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是：</p><pre><code>- 兼容性为主- orient 另一个方向的字段为 horizontal(相对方向的水平)- box-line 只在一行显示改为single- flex-flow 是 flex-direction和 flex-wrap 缩写行用 row 列用 column 不换行用 nowrap-stretch 伸缩项目拉伸填充整个伸缩容器</code></pre></blockquote><h5 id="如果是伸缩子项目"><a href="#如果是伸缩子项目" class="headerlink" title="如果是伸缩子项目"></a>如果是伸缩子项目</h5><p>按照比例添加如下代码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-moz-box-flex: 1;</span><br><span class="line">-webkit-box-flex: 1;</span><br><span class="line">-ms-flex: 1;</span><br><span class="line">-webkit-flex: 1;</span><br><span class="line">flex: 1;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>需要注意的是</p><pre><code>- 如果一个元素这是了宽度没有flex-1，那么剩下的将占用除去宽度意外的剩余空间- 如果要这是排序 默认值是1开始的。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-moz-box-ordinal-group: 2;</span><br><span class="line">-webkit-box-ordinal-group: 2;</span><br><span class="line">-ms-flex-order: 2;</span><br><span class="line">-webkit-order: 2;</span><br><span class="line">order: 2;</span><br></pre></td></tr></table></figure></blockquote><p>暂时先到这里，后期再加……</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;关于flex的内容不说太多，网上太多，再次只记录如何使用了&quot;&gt;&lt;a href=&quot;#关于flex的内容不说太多，网上太多，再次只记录如何使用了&quot; class=&quot;headerlink&quot; title=&quot;关于flex的内容不说太多，网上太多，再次只记录如何使用了&quot;&gt;&lt;/a&gt;关于flex的内容不说太多，网上太多，再次只记录如何使用了&lt;/h4&gt;&lt;p&gt;只要用flex布局的，添加一下内容&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*设置body为伸缩容器*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: -webkit-box;/*老版本：iOS 6-, Safari 3.1-6*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: -moz-box;/*老版本：Firefox 19- */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: -ms-flexbox;/*混合版本：IE10*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: -webkit-flex;/*新版本：Chrome*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: flex;/*标准规范：Opera 12.1, Firefox 20+*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*伸缩项目换行*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-moz-box-orient: vertical || horizontal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-webkit-box-orient: vertical || horizontal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-moz-box-direction: normal || reverse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-webkit-box-direction: normal || reverse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-moz-box-lines: multiple || single;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-webkit-box-lines: multiple || single;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-webkit-flex-flow: column wrap || row / nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-ms-flex-flow: column wrap || row / nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flex-flow: column wrap || row / nowrap;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://algate.coding.me/categories/CSS3/"/>
    
    
      <category term="flexbox" scheme="https://algate.coding.me/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>Notation-语法</title>
    <link href="https://algate.coding.me/2018/11/09/Notation-%E8%AF%AD%E6%B3%95/"/>
    <id>https://algate.coding.me/2018/11/09/Notation-语法/</id>
    <published>2018-11-09T03:46:30.000Z</published>
    <updated>2019-02-27T03:27:59.596Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><h4 id="面试题引起的f-ck"><a href="#面试题引起的f-ck" class="headerlink" title="面试题引起的f*ck"></a>面试题引起的f*ck</h4><p>Examples<br>[] is equal ![]</p><p>Array is equal not array:</p><p>[] == ![]; // -&gt; true ( What The f*ck Javascript )</p><p>💡 Explanation:</p><p>The abstract equality operator converts both sides to numbers to compare them, and both sides become the number 0 for different reasons. Arrays are truthy, so on the right, the opposite of a truthy value is false, which is then coerced to 0. On the left, however, an empty array is coerced to a number without becoming a boolean first, and empty arrays are coerced to 0, despite being truthy.</p><p>Here is how this expression simplifies:</p><p>+[] == +![];<br>0 == +false;<br>0 == 0;<br>true;</p><p>See also [] is truthy, but not true.<br><a id="more"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;面试题引起的f-ck&quot;&gt;&lt;a href=&quot;#面试题引起的f-ck&quot; class=&quot;headerlink&quot; title=&quot;面试题引起的f*ck&quot;&gt;&lt;/a&gt;面试题引起的f*ck&lt;/h4&gt;&lt;p&gt;Examples&lt;br&gt;[] is equal ![]&lt;/p&gt;&lt;p&gt;Array is equal not array:&lt;/p&gt;&lt;p&gt;[] == ![]; // -&amp;gt; true ( What The f*ck Javascript )&lt;/p&gt;&lt;p&gt;💡 Explanation:&lt;/p&gt;&lt;p&gt;The abstract equality operator converts both sides to numbers to compare them, and both sides become the number 0 for different reasons. Arrays are truthy, so on the right, the opposite of a truthy value is false, which is then coerced to 0. On the left, however, an empty array is coerced to a number without becoming a boolean first, and empty arrays are coerced to 0, despite being truthy.&lt;/p&gt;&lt;p&gt;Here is how this expression simplifies:&lt;/p&gt;&lt;p&gt;+[] == +![];&lt;br&gt;0 == +false;&lt;br&gt;0 == 0;&lt;br&gt;true;&lt;/p&gt;&lt;p&gt;See also [] is truthy, but not true.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="语法" scheme="https://algate.coding.me/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 - 新增Api-History</title>
    <link href="https://algate.coding.me/2018/06/17/HTML5-Api-History%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>https://algate.coding.me/2018/06/17/HTML5-Api-History状态管理/</id>
    <published>2018-06-17T07:21:30.000Z</published>
    <updated>2019-02-27T03:27:59.550Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --><p>前端路由的实现方式</p><p>前端路由主要由两种方式实现：</p><p>location.hash+hashchange事件<br>history.pushState()+popState事件</p><h4 id="hash-hashchange实现"><a href="#hash-hashchange实现" class="headerlink" title="hash+hashchange实现"></a>hash+hashchange实现</h4><p>这种方法的好处在于支持IE浏览器。对早期的一些浏览器的支持比较好。<br>实现原理：<br>location.hash始终指向页面url 中#之后的内容<br>当当前页面的url =<code>www.baidu.com</code>,可以在浏览器的控制台输入location.hash为空，<br>当页面指向url =<code>www.baidu.com/#/hello</code>的时候,location.hash = <code>#/hello</code>。通过读取location.hash可以知道当前页面所处的位置。通过hashchange事件可以监听location.hash的变化，从而进行相应的处理即可。<br>那么如何触发hash的改变呢？这里主要由两种方法：</p><p>设置a标签，href =’#/blue’，当点击标签的时候，可以在当前url的后面增加上’#/blue’，同时触发hashchange,再回调函数中进行处理。<br>直接在js中对<code>location.hash =&#39;#/blue&#39;</code>即可，此时url会改变，也会触发hashchange事件。<br>下面给出一个通用的hash前端路由的实现方案：<br><a id="more"></a></p><pre><code>function Router() {   this.currentUrl = &apos;&apos;;   this.routes = {};}Router.prototype.route = function(path, callback) {   this.routes[path] = callback || function() {}}Router.prototype.refresh = function() {   this.currentUrl = location.hash.slice(1) || &apos;/&apos;;   this.routes[this.currentUrl]();}Router.prototype.init = function() {   window.addEventListener(&apos;load&apos;, this.refresh.bind(this), false);   window.addEventListener(&apos;hashchange&apos;, this.refresh.bind(this), false);   // console.log(location.hash)   // if(location.hash.slice(1)!==&apos;/&apos;)   // location.hash = &apos;#/&apos;;}</code></pre><p>上述定义了一个Router对象，在实例中可以这么使用：</p><pre><code>var route = new Router();route.init();function changecolor(color) {    var body = document.getElementsByTagName(&apos;body&apos;)[0];    body.style[&apos;background-color&apos;] = color;}route.route(&apos;/&apos;, changecolor.bind(null, &apos;skyblue&apos;));route.route(&apos;/blue&apos;, changecolor.bind(null, &apos;blue&apos;));route.route(&apos;/green&apos;, changecolor.bind(null, &apos;green&apos;));route.route(&apos;/color&apos;, function() {    var p = document.getElementsByTagName(&apos;a&apos;);    [].forEach.call(p, function(item) {        item.style[&apos;color&apos;] = &apos;#&apos; + ((~~(Math.random() * (1 &lt;&lt; 24))).toString(16));    })});</code></pre><blockquote><p>新建一个Router的实例，进行初始化，然后进行url与callback的绑定，就可以在hash发生改变的时候出发触发相应的callback。这种方式支持浏览器的前进与后退。很好的解决了前后端分离之后的问题。这种方式有一个缺点就是#的存在，让一些人看了觉得不是很舒服，所以html给history新增了一些api，从而以一种更优雅的方式实现前端路由。</p></blockquote><h4 id="history-pushState-popstate"><a href="#history-pushState-popstate" class="headerlink" title="history.pushState()+popstate"></a>history.pushState()+popstate</h4><p>跟之前的方法一样,pushState()修改url的地址，popstate监听地址的改变，不同的是，手动的进行pushState()并不会触发popstate事件。<br>可以这样理解：</p><p>1.用户点击了某个链接，触发ajax获取新的页面或者触发js中的某些操作，改变了dom结构。<br>2.我们希望保存上一个页面，这时候我们就使用pushState(data,null,url)来将上一个页面的信息保存下来。<br>3.当用户点击浏览器的前进或者后退的时候，触发popstate事件，可以读取到数据，然后进行该页面的操作或者ajax获取该页面的数据，也可以通过pushState()中的data来进行还原、更新。</p><pre><code>(function() {    var div1 = document.getElementById(&apos;div1&apos;);    var a1 = document.getElementById(&apos;a1&apos;);    var a2 = document.getElementById(&apos;a2&apos;);    var count1 = 0;    var count2 = 0;    //最开始的状态，采用replace直接替换    history.replaceState({        count1: count1,        count2: count2    }, null, &apos;&apos;);    a1.addEventListener(&apos;click&apos;, function() {        count1++;        //之后的状态，需要进行保存        history.pushState({            count1: count1,            count2: count2        }, null, &apos;#/s&apos; + count1);        a1.innerHTML = &apos;s&apos; + count1;    })    a2.addEventListener(&apos;click&apos;, function() {        count2++;        //之后的状态，需要进行保存        history.pushState({            count1: count1,            count2: count2        }, null, &apos;#/k&apos; + count2);        a2.innerHTML = &apos;k&apos; + count2;    })    window.addEventListener(&apos;popstate&apos;, function(e) {        console.log(e.state);        //监听popstate事件，对状态进行还原        a1.innerHTML = &apos;s&apos; + e.state.count1;        a2.innerHTML = &apos;k&apos; + e.state.count2;    })})()</code></pre><blockquote><p>采用了立即执行函数来避免污染全局变量，其中点击一下a1,a2元素，均会进行pushState操作，在进行前进后退的时候，就会触发popstate事件，通过在该事件中对元素进行还原，优雅的解决了单页应用前进后退问题。<br>演示地址：<a href="http://blog.xiaoboma.com/router-history/" target="_blank" rel="noopener">demo</a></p></blockquote><p>完整代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot; /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;pushState demo&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">        transition: background-color .3s;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-org &#123;</span><br><span class="line">        color: #383c3c;</span><br><span class="line">        background-color: #FF6633;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-blue &#123;</span><br><span class="line">        color: #fbfaf5;</span><br><span class="line">        background-color: #6699FF;</span><br><span class="line">    &#125;</span><br><span class="line">    .time &#123;</span><br><span class="line">        margin-top: 20%;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 4em;</span><br><span class="line">        font-weight: 100;</span><br><span class="line">    &#125;</span><br><span class="line">    .switch &#123;</span><br><span class="line">        margin: auto;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        position:absolute;</span><br><span class="line">        bottom:25%;</span><br><span class="line">        left:0;</span><br><span class="line">        right:0;</span><br><span class="line">        cursor:pointer;</span><br><span class="line">        box-shadow: 0 0 0 5px rgba(255,255,255,.6);</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        transition: box-shadow .1s;</span><br><span class="line">    &#125;</span><br><span class="line">    .switch:hover &#123;</span><br><span class="line">        box-shadow: 0 0 0 5px rgba(255,255,255,.75);</span><br><span class="line">    &#125;</span><br><span class="line">    .switch:active &#123;</span><br><span class="line">        box-shadow: 0 0 0 30px rgba(255,255,255,.4);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body class=&quot;bg-org&quot;&gt;</span><br><span class="line">    &lt;h1 id=&quot;time&quot; class=&quot;time&quot;&gt;Loading...&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;switch&quot; class=&quot;switch&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 传统location方式 --&gt;</span><br><span class="line">&lt;!-- &lt;script&gt;</span><br><span class="line">    if(urlParam(&apos;state&apos;)==&apos;blue&apos;) &#123;</span><br><span class="line">        $(&apos;body&apos;).className = &apos;bg-blue&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $(&apos;body&apos;).className = &apos;bg-org&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var time = $(&apos;#time&apos;);</span><br><span class="line">    function $(selector) &#123;return document.querySelector(selector);&#125;</span><br><span class="line">    // 显示当前时间</span><br><span class="line">    setInterval(function()&#123;</span><br><span class="line">        var date = new Date(),</span><br><span class="line">            format = function(n) &#123;return n&lt;10?&apos;0&apos;+n:n&#125;;</span><br><span class="line">        time.innerHTML = format(date.getHours()) + &apos; : &apos; + format(date.getMinutes()) + &apos; : &apos; + format(date.getSeconds());</span><br><span class="line">    &#125;, 500);</span><br><span class="line"></span><br><span class="line">    $(&apos;#switch&apos;).addEventListener(&apos;click&apos;, toggleState, false);</span><br><span class="line">    function toggleState(e) &#123;</span><br><span class="line">        var flag = $(&apos;body&apos;).className==&apos;bg-org&apos;?&apos;bg-blue&apos;:&apos;bg-org&apos;;</span><br><span class="line">        window.location = location.pathname + &apos;?state=&apos; + flag.split(&apos;-&apos;)[1];</span><br><span class="line">        $(&apos;body&apos;).className = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取url参数</span><br><span class="line">     * @param  &#123;String&#125; name 参数名</span><br><span class="line">     * @return &#123;String&#125;      参数值</span><br><span class="line">     */</span><br><span class="line">    function getUrlParam(name)&#123;</span><br><span class="line">        var reg, value;</span><br><span class="line">        reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">        value = window.location.search.substr(1).match(reg);</span><br><span class="line">        return value==null?null:decodeURI(value[2]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt; --&gt;</span><br><span class="line">&lt;!-- popstate事件 --&gt;</span><br><span class="line">    &lt;!-- &lt;script&gt;</span><br><span class="line">        var time = $(&apos;#time&apos;);</span><br><span class="line">        function $(selector) &#123;return document.querySelector(selector);&#125;</span><br><span class="line"></span><br><span class="line">        // 显示当前时间</span><br><span class="line">        setInterval(function()&#123;</span><br><span class="line">            var date = new Date(),</span><br><span class="line">                format = function(n) &#123;return n&lt;10?&apos;0&apos;+n:n&#125;;</span><br><span class="line">            time.innerHTML = format(date.getHours()) + &apos; : &apos; + format(date.getMinutes()) + &apos; : &apos; + format(date.getSeconds());</span><br><span class="line">        &#125;, 500);</span><br><span class="line"></span><br><span class="line">        $(&apos;#switch&apos;).addEventListener(&apos;click&apos;, toggleState, false);</span><br><span class="line"></span><br><span class="line">        // 监听popstate事件</span><br><span class="line">        history.pushState &amp;&amp; window.addEventListener(&quot;popstate&quot;, function(e) &#123;</span><br><span class="line"></span><br><span class="line">            // 获取history.state对象中的状态信息</span><br><span class="line">            // 在这里state将自动成为event的子对象，可直接通过event.state访问</span><br><span class="line">            var flag = e.state &amp;&amp; e.state.title;</span><br><span class="line">            $(&apos;body&apos;).className = flag || ($(&apos;body&apos;).className==&apos;bg-org&apos;?&apos;bg-blue&apos;:&apos;bg-org&apos;);</span><br><span class="line">        &#125;, false);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        function toggleState(e) &#123;</span><br><span class="line">            var flag = $(&apos;body&apos;).className==&apos;bg-org&apos;?&apos;bg-blue&apos;:&apos;bg-org&apos;;</span><br><span class="line"></span><br><span class="line">            // 新建历史记录，将当前状态信息保存至history.state中</span><br><span class="line">            console.log(history);</span><br><span class="line">            history.pushState &amp;&amp; history.pushState(&#123; title: flag &#125;, flag, &apos;?state=&apos;+flag.split(&apos;-&apos;)[1]);</span><br><span class="line">            $(&apos;body&apos;).className = flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- hashchange事件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var time = $(&apos;#time&apos;);</span><br><span class="line">    function $(selector) &#123;return document.querySelector(selector);&#125;</span><br><span class="line">    // 显示当前时间</span><br><span class="line">    setInterval(function()&#123;</span><br><span class="line">        var date = new Date(),</span><br><span class="line">            format = function(n) &#123;return n&lt;10?&apos;0&apos;+n:n&#125;;</span><br><span class="line">        time.innerHTML = format(date.getHours()) + &apos; : &apos; + format(date.getMinutes()) + &apos; : &apos; + format(date.getSeconds());</span><br><span class="line">    &#125;, 500);</span><br><span class="line"></span><br><span class="line">    // 监听onhashchange事件</span><br><span class="line">    window.addEventListener(&quot;hashchange&quot;, function(e) &#123;</span><br><span class="line">        // 获取hash值判断页面状态</span><br><span class="line">        var flag = location.hash &amp;&amp; location.hash.substring(1);</span><br><span class="line">        console.log(flag);</span><br><span class="line">        $(&apos;body&apos;).className = &apos;bg-&apos;+flag || ($(&apos;body&apos;).className==&apos;bg-org&apos;?&apos;bg-blue&apos;:&apos;bg-org&apos;);</span><br><span class="line">    &#125;, false);</span><br><span class="line">    $(&apos;#switch&apos;).addEventListener(&apos;click&apos;, toggleState, false);</span><br><span class="line">    function toggleState(e) &#123;</span><br><span class="line">        var flag = $(&apos;body&apos;).className==&apos;bg-org&apos;?&apos;bg-blue&apos;:&apos;bg-org&apos;;</span><br><span class="line"></span><br><span class="line">        // 在url中写入新的hash值</span><br><span class="line">        location.hash = flag.split(&apos;-&apos;)[1];</span><br><span class="line">        $(&apos;body&apos;).className = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;前端路由的实现方式&lt;/p&gt;&lt;p&gt;前端路由主要由两种方式实现：&lt;/p&gt;&lt;p&gt;location.hash+hashchange事件&lt;br&gt;history.pushState()+popState事件&lt;/p&gt;&lt;h4 id=&quot;hash-hashchange实现&quot;&gt;&lt;a href=&quot;#hash-hashchange实现&quot; class=&quot;headerlink&quot; title=&quot;hash+hashchange实现&quot;&gt;&lt;/a&gt;hash+hashchange实现&lt;/h4&gt;&lt;p&gt;这种方法的好处在于支持IE浏览器。对早期的一些浏览器的支持比较好。&lt;br&gt;实现原理：&lt;br&gt;location.hash始终指向页面url 中#之后的内容&lt;br&gt;当当前页面的url =&lt;code&gt;www.baidu.com&lt;/code&gt;,可以在浏览器的控制台输入location.hash为空，&lt;br&gt;当页面指向url =&lt;code&gt;www.baidu.com/#/hello&lt;/code&gt;的时候,location.hash = &lt;code&gt;#/hello&lt;/code&gt;。通过读取location.hash可以知道当前页面所处的位置。通过hashchange事件可以监听location.hash的变化，从而进行相应的处理即可。&lt;br&gt;那么如何触发hash的改变呢？这里主要由两种方法：&lt;/p&gt;&lt;p&gt;设置a标签，href =’#/blue’，当点击标签的时候，可以在当前url的后面增加上’#/blue’，同时触发hashchange,再回调函数中进行处理。&lt;br&gt;直接在js中对&lt;code&gt;location.hash =&amp;#39;#/blue&amp;#39;&lt;/code&gt;即可，此时url会改变，也会触发hashchange事件。&lt;br&gt;下面给出一个通用的hash前端路由的实现方案：&lt;br&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://algate.coding.me/categories/HTML5/"/>
    
    
      <category term="History历史状态管理" scheme="https://algate.coding.me/tags/History%E5%8E%86%E5%8F%B2%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 - 新增Api</title>
    <link href="https://algate.coding.me/2018/06/15/HTML5-%E6%96%B0%E5%A2%9EApi/"/>
    <id>https://algate.coding.me/2018/06/15/HTML5-新增Api/</id>
    <published>2018-06-15T10:05:30.000Z</published>
    <updated>2019-02-27T03:27:59.552Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><h3 id="1-H5新增选择器-SelectorsAPI"><a href="#1-H5新增选择器-SelectorsAPI" class="headerlink" title="1. H5新增选择器( SelectorsAPI )"></a>1. H5新增选择器( SelectorsAPI )</h3><h5 id="querySelector-“body-mydiv-selected-img-fig-title-hello-”"><a href="#querySelector-“body-mydiv-selected-img-fig-title-hello-”" class="headerlink" title="querySelector(“body / #mydiv / .selected / img .fig / [title=hello]”)"></a>querySelector(“body / #mydiv / .selected / img .fig / [title=hello]”)</h5><p>参数：一个CSS选择符 “img .layer”返回类为”fig”的第一个img元素;<br>返回：匹配到的第一个元素<br>调用：Document类型，Element类型<br>浏览器的兼容性：IE8+、FireFox3.5+、Safari3.1+、Chrome和Opera10+</p><h5 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h5><a id="more"></a><p>参数：也是一个CSS选择符<br>返回：一个NodeList实例<br>调用：Document类型，Element类型和DocumentFragment类型<br>浏览器的兼容性：IE8+、FireFox3.5+、Safari3.1+、Chrome和Opera10+</p><h5 id="document-getElementByClass-“className”"><a href="#document-getElementByClass-“className”" class="headerlink" title="document.getElementByClass(“className”)"></a>document.getElementByClass(“className”)</h5><p>参数：一个或多个类名的字符串<br>返回：一个NodeList实例<br>调用：Document类型<br>浏览器的兼容性：IE9+</p><h5 id="Element-classList-属性"><a href="#Element-classList-属性" class="headerlink" title="Element.classList  属性"></a>Element.classList 属性</h5><p>返回: 该元素的class属性值的列表，返回的列表是一个类似数组的对象,存在length属性<br>返回的对象存在操作class值的方法：</p><pre><code>add(value): 将给定的字符串value,添加class 属性列表, 若已存在，就不添加remove(value): 从列表中删除valuetoggle(value): 切换class，即：存在时删除，不存在时添加contains(value): 判断列表中是否存在value</code></pre><p>浏览器的兼容性：Firefox3.6+ 和 Chrome</p><h3 id="2-焦点管理-H5添加了辅助管理DOM焦点的功能。"><a href="#2-焦点管理-H5添加了辅助管理DOM焦点的功能。" class="headerlink" title="2. 焦点管理 - H5添加了辅助管理DOM焦点的功能。"></a>2. 焦点管理 - H5添加了辅助管理DOM焦点的功能。</h3><h5 id="1）document-activeElement属性，该属性引用DOM中当前获得了焦点的元素"><a href="#1）document-activeElement属性，该属性引用DOM中当前获得了焦点的元素" class="headerlink" title="1）document.activeElement属性，该属性引用DOM中当前获得了焦点的元素"></a>1）document.activeElement属性，该属性引用DOM中当前获得了焦点的元素</h5><p>元素获得焦点的方式：</p><p>页面加载（文档刚刚加载完成时，document.activeElement保存的是document.body元素的引用，文档加载期间为null）<br>用户输入<br>在代码中调用focus()方法, 如 button.focus()。</p><h5 id="2）document-hasFocus-方法，用于确定文档是否获得了焦点，获得了焦点时为true-否则为false"><a href="#2）document-hasFocus-方法，用于确定文档是否获得了焦点，获得了焦点时为true-否则为false" class="headerlink" title="2）document.hasFocus() 方法，用于确定文档是否获得了焦点，获得了焦点时为true,否则为false"></a>2）document.hasFocus() 方法，用于确定文档是否获得了焦点，获得了焦点时为true,否则为false</h5><p>通过检测文档是否获得了焦点，可以知道用户是不是正在与页面交互，提高Web应用的无障碍性。<br>浏览器兼容性：IE4+ 、Firefox 3+ 、 Safari 4+ 、Chrome和 Opera 8+</p><h3 id="3-自定义数据属性"><a href="#3-自定义数据属性" class="headerlink" title="3. 自定义数据属性"></a>3. 自定义数据属性</h3><p>HTML5规定，可以为元素添加非标准的属性，但要添加前缀data-,目的是为元素提供与渲染无关的信息，或者提供语义信息。这些属性可以任意添加、随便命名，只要以data开头即可。</p><pre><code>&lt;div id=&quot;mydiv&quot; data-app=&quot;12&quot; data-myname=&quot;Lily&quot; data-my-sex=&quot;女&quot;&gt;&lt;/div&gt;</code></pre><p>访问和设置自定义属性：</p><pre><code>//通过元素的dataset属性，该属性返回值是DOMStringMap, 即一个名值对的映射alert ( div.dataset.app ) ;   //输出”12”         div.dataset.app=”34”;alert ( div.dataset.myname ) ;   //输出”Lily”    div.dataset.myname=”Jack”;alert ( div.dataset.mySex );   //输出”女”        div.dataset.mySex=”men”;  //驼峰式</code></pre><p>自定义数据属性的作用：实现HTML标签与JS的交互相分离，根据不同属性值，实现不同的效果。如：库jquery mobile, AngularJS</p><h3 id="4-延迟加载JS"><a href="#4-延迟加载JS" class="headerlink" title="4. 延迟加载JS"></a>4. 延迟加载JS</h3><p>外部 JS作为body元素的最后一个标签加入HTML，不影响文档页面加载的速度<br>如果给<code>&lt;script&gt;</code>标签添加<code>defer</code>属性，则该标签引入的JS外部文件加载会延迟到onload事件触发之前完成。<br>如果给<code>&lt;script&gt;</code>标签添加<code>async</code>属性, JS文件会异步加载，多个JS文件都添加该属性时，执行顺序不一定，那个先加载完执行哪个，这是就会出现函数找不到的问题。<br>一般用于JS文件之间是并行关系时使用，如加载广告</p><h3 id="5-历史状态管理-onhashchange-amp-pushState-replaceState"><a href="#5-历史状态管理-onhashchange-amp-pushState-replaceState" class="headerlink" title="5. 历史状态管理 - onhashchange &amp; pushState || replaceState"></a>5. 历史状态管理 - onhashchange &amp; pushState || replaceState</h3><p>1) 通过用户跳转页面的操作，改变历史状态管理：</p><p>在现代Web应用中，用户的每次操作不一定打开一个全新的页面，因此”后退”和”前进”按钮也就失去了作用，导致用户很难在不同的状态间切换。</p><p>2）在网页URL后面添加hash值参数，改变历史状态管理：</p><p>如baidu.com#aaaaaaa<br>通过window.location.hash访问和设置URL的参数列表</p><pre><code>alert (window.location.hash) //输出当前页面的参数列表 “#aaaaaaa”</code></pre><p>H5新增了hashchange 事件，以便在URL的参数列表（及URL中” # “号后面的所有字符串）发生变化时，通知开发人员。<br>新增这个事件，是因为在Ajax应用中，开发人员经常要利用URL参数列表来保存状态或导航信息。<br>必须把<code>onhashchange</code> 事件绑定到window对象上。<br>浏览器兼容性：IE8+ ,Firefox3.6+, Safari5+, Chrome和Opera10.6+</p><pre><code>&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;script&gt;window.onload = function() {    var oInput = document.getElementById(&apos;input1&apos;);    var oDiv = document.getElementById(&apos;div1&apos;);    var json = {};    oInput.onclick = function() {        var num = Math.random(); //产生0-1之间的随机数        var arr = randomNum(35, 7); //产生7个由1-35之间的整数组成的随机数        json[num] = arr;        console.log(json);        // oDiv.innerHTML = arr;        window.location.hash = num; //设置当前网页网址URL的hash值    };    window.onhashchange = function() {        console.log(window.location.hash);        oDiv.innerHTML = json[window.location.hash.substring(1)];    };    function randomNum(iAll, iNow) {        var arr = [];        var newArr = [];        for (var i = 1; i &lt;= iAll; i++) {            arr.push(i);        }        for (var i = 0; i &lt; iNow; i++) {            newArr.push(arr.splice(Math.floor(Math.random() * arr.length), 1));        }        return newArr;    }};&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; type=&quot;button&quot; value=&quot;随机选择&quot; id=&quot;input1&quot;&gt;&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>3) 通过history对象的<code>pushState()</code>方法可以创建新的历史状态,通过window的<code>popstate事件对象</code>的<code>state属性</code>可以获得作为第一个参数传递给pushState()方法的状态对象。</p><p>replaceState()方法：重写当前状态，参数与 pushState()方法的前两个参数相同。</p><p>详细操作更新：<br>现在HTML5规范为window.history引入了两个新api，pushState和replaceState，我们可以使用它很方便的达到改变url不重载页面的目的。<br>未完待续…<br><a href="https://blog.csdn.net/helloxiaoliang/article/details/73850428" target="_blank" rel="noopener">https://blog.csdn.net/helloxiaoliang/article/details/73850428</a></p><p>浏览器兼容性：Firefox4+,Safari5+, Opera11.5+和Chrome支持。</p><h3 id="6-HTMLDocument的变化"><a href="#6-HTMLDocument的变化" class="headerlink" title="6.HTMLDocument的变化"></a>6.HTMLDocument的变化</h3><h5 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h5><p>IE4首先为document设置了readyState属性，其他浏览器也陆续增加了这个属性，HTML最终将这个属性写入了标准。在IE中，document的readyState属性包括两个值：<br>[1]loading：正在载入文档<br>[2]complete：文档加载结束<br>我们看下标准中对readyState的阐述：</p><blockquote><p>在firefox、chrome等浏览器中，loading和complete之间还有一个interactive状态，我们看一下MDN中对interactive状态的阐述：<br>The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading. The state indicates that theDOMContentLoaded event has been fired.<br>也就是说，文档本身已经被加载完毕，并且也已经被解析完毕，但是像image,css style文件等外部资源还在下载，这时意味着DOMContentLoaded事件的触发。</p></blockquote><p>在readyState状态的改变会触发readystatechange事件，我们可以通过为document绑定readystatechange事件来监听其状态的变化。</p><p>注：IE4+,Firefox3.6+,chrome,Opera9+,Safari支持这两个属性</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;1-H5新增选择器-SelectorsAPI&quot;&gt;&lt;a href=&quot;#1-H5新增选择器-SelectorsAPI&quot; class=&quot;headerlink&quot; title=&quot;1. H5新增选择器( SelectorsAPI )&quot;&gt;&lt;/a&gt;1. H5新增选择器( SelectorsAPI )&lt;/h3&gt;&lt;h5 id=&quot;querySelector-“body-mydiv-selected-img-fig-title-hello-”&quot;&gt;&lt;a href=&quot;#querySelector-“body-mydiv-selected-img-fig-title-hello-”&quot; class=&quot;headerlink&quot; title=&quot;querySelector(“body / #mydiv / .selected / img .fig / [title=hello]”)&quot;&gt;&lt;/a&gt;querySelector(“body / #mydiv / .selected / img .fig / [title=hello]”)&lt;/h5&gt;&lt;p&gt;参数：一个CSS选择符 “img .layer”返回类为”fig”的第一个img元素;&lt;br&gt;返回：匹配到的第一个元素&lt;br&gt;调用：Document类型，Element类型&lt;br&gt;浏览器的兼容性：IE8+、FireFox3.5+、Safari3.1+、Chrome和Opera10+&lt;/p&gt;&lt;h5 id=&quot;querySelectorAll&quot;&gt;&lt;a href=&quot;#querySelectorAll&quot; class=&quot;headerlink&quot; title=&quot;querySelectorAll()&quot;&gt;&lt;/a&gt;querySelectorAll()&lt;/h5&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://algate.coding.me/categories/HTML5/"/>
    
    
      <category term="HTML5相关Api" scheme="https://algate.coding.me/tags/HTML5%E7%9B%B8%E5%85%B3Api/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶 - JS实现数组去重方法总结</title>
    <link href="https://algate.coding.me/2018/06/15/JS-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://algate.coding.me/2018/06/15/JS-实现数组去重方法总结/</id>
    <published>2018-06-15T05:48:30.000Z</published>
    <updated>2019-02-27T03:27:59.564Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>方法一：</p><p>双层循环，外层循环元素，内层循环时比较值</p><p>如果有相同的值则跳过，不相同则push进数组</p><pre><code>Array.prototype.distinct = function() {    var arr = this,        result = [],        i,        j,        len = arr.length;    for (i = 0; i &lt; len; i++) {        for (j = i + 1; j &lt; len; j++) {            if (arr[i] === arr[j]) {                j = ++i;            }        }        result.push(arr[i]);    }    return result;}var arra = [1, 2, 3, 4, 4, 1, 1, 2, 1, 1, 1];arra.distinct(); //返回[3,4,2,1]</code></pre><a id="more"></a><p>方法二：利用splice直接在原数组进行操作</p><p>双层循环，外层循环元素，内层循环时比较值</p><p>值相同时，则删去这个值</p><p>注意点:删除元素之后，需要将数组的长度也减1.</p><pre><code>Array.prototype.distinct = function() {    var arr = this,        i,        j,        len = arr.length;    for (i = 0; i &lt; len; i++) {        for (j = i + 1; j &lt; len; j++) {            if (arr[i] == arr[j]) {                arr.splice(j, 1);                len--;                j--;            }        }    }    return arr;};var a = [1, 2, 3, 4, 5, 6, 5, 3, 2, 4, 56, 4, 1, 2, 1, 1, 1, 1, 1, 1, ];var b = a.distinct();console.log(b.toString()); //1,2,3,4,5,6,56</code></pre><p>方法三：利用对象的属性不能相同的特点进行去重</p><pre><code>Array.prototype.distinct = function() {    var arr = this,        i,        obj = {},        result = [],        len = arr.length;    for (i = 0; i &lt; arr.length; i++) {        if (!obj[arr[i]]) { //如果能查找到，证明数组元素重复了            obj[arr[i]] = 1;            result.push(arr[i]);        }    }    return result;};var a = [1, 2, 3, 4, 5, 6, 5, 3, 2, 4, 56, 4, 1, 2, 1, 1, 1, 1, 1, 1, ];var b = a.distinct();console.log(b.toString()); //1,2,3,4,5,6,56</code></pre><p>方法四：数组递归去重<br>运用递归的思想</p><p>先排序，然后从最后开始比较，遇到相同，则删除</p><pre><code>Array.prototype.distinct = function() {    var arr = this,        len = arr.length;    arr.sort(function(a, b) { //对数组进行排序才能方便比较        return a - b;    })    function loop(index) {        if (index &gt;= 1) {            if (arr[index] === arr[index - 1]) {                arr.splice(index, 1);            }            loop(index - 1); //递归loop函数进行去重        }    }    loop(len - 1);    return arr;};var a = [1, 2, 3, 4, 5, 6, 5, 3, 2, 4, 56, 4, 1, 2, 1, 1, 1, 1, 1, 1, 56, 45, 56];var b = a.distinct();console.log(b.toString()); //1,2,3,4,5,6,45,56</code></pre><p>方法五：利用indexOf以及forEach</p><pre><code>Array.prototype.distinct = function() {    var arr = this,        result = [],        len = arr.length;    arr.forEach(function(v, i, arr) { //这里利用map，filter方法也可以实现        var bool = arr.indexOf(v, i + 1); //从传入参数的下一个索引值开始寻找是否存在重复        if (bool === -1) {            result.push(v);        }    })    return result;};var a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 1, 23, 1, 23, 2, 3, 2, 3, 2, 3];var b = a.distinct();console.log(b.toString()); //1,23,2,3</code></pre><p>方法六：利用ES6的set<br>Set数据结构，它类似于数组，其成员的值都是唯一的。<br>利用Array.from将Set结构转换成数组</p><blockquote><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。<br>Set 本身是一个构造函数，用来生成 Set 数据结构。</p></blockquote><blockquote><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p></blockquote><pre><code>function dedupe(array){    return Array.from(new Set(array));}dedupe([1,1,2,3]) //[1,2,3]</code></pre><p>拓展运算符(…)内部使用for…of循环</p><pre><code>let arr = [1,2,3,3];let resultarr = [...new Set(arr)];console.log(resultarr); //[1,2,3]</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;方法一：&lt;/p&gt;&lt;p&gt;双层循环，外层循环元素，内层循环时比较值&lt;/p&gt;&lt;p&gt;如果有相同的值则跳过，不相同则push进数组&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Array.prototype.distinct = function() {
    var arr = this,
        result = [],
        i,
        j,
        len = arr.length;
    for (i = 0; i &amp;lt; len; i++) {
        for (j = i + 1; j &amp;lt; len; j++) {
            if (arr[i] === arr[j]) {
                j = ++i;
            }
        }
        result.push(arr[i]);
    }
    return result;
}
var arra = [1, 2, 3, 4, 4, 1, 1, 2, 1, 1, 1];
arra.distinct(); //返回[3,4,2,1]
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="数组去重" scheme="https://algate.coding.me/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>三剑客-angular、vue、react比较</title>
    <link href="https://algate.coding.me/2018/06/11/%E4%B8%89%E5%89%91%E5%AE%A2-AngularVueReact%E6%AF%94%E8%BE%83/"/>
    <id>https://algate.coding.me/2018/06/11/三剑客-AngularVueReact比较/</id>
    <published>2018-06-11T10:01:30.000Z</published>
    <updated>2019-02-27T03:27:59.661Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --><h3 id="比较-Angular、React、Vue-三剑客"><a href="#比较-Angular、React、Vue-三剑客" class="headerlink" title="比较 Angular、React、Vue 三剑客"></a>比较 Angular、React、Vue 三剑客</h3><p>为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 Angular 和 React 非常流行，并且最近出现的新贵 VueJS 同样博得了很多人的关注。更重要的是，这只是一些新起之秀。</p><h5 id="在开始之前-——-是否应用单页-Web-应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页-Web-应用程序（MPA）”。"><a href="#在开始之前-——-是否应用单页-Web-应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页-Web-应用程序（MPA）”。" class="headerlink" title="在开始之前 —— 是否应用单页 Web 应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页 Web 应用程序（MPA）”。"></a>在开始之前 —— 是否应用单页 Web 应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页 Web 应用程序（MPA）”。</h5><p>具体对比分析：<br><a id="more"></a></p><table><thead><tr><th>*</th><th>单页面应用（SinglePage Web Application，SPA）</th><th>多页面应用（MultiPage Application，MPA）</th></tr></thead><tbody><tr><td>组成</td><td>一个外壳页面和多个页面片段组成</td><td>多个完整页面构成</td></tr><tr><td>资源共用(css,js)</td><td>共用，只需在外壳部分加载</td><td>不共用，每个页面都需要加载</td></tr><tr><td>刷新方式</td><td>页面局部刷新或更改</td><td>整页刷新</td></tr><tr><td>url 模式</td><td>a.com/#/pageone a.com/#/pagetwo</td><td>a.com/pageone.html a.com/pagetwo.html</td></tr><tr><td>用户体验</td><td>页面片段间的切换快，用户体验良好</td><td>页面切换加载缓慢，流畅度不够，用户体验比较差</td></tr><tr><td>转场动画</td><td>容易实现</td><td>无法实现</td></tr><tr><td>数据传递</td><td>容易</td><td>依赖 url传参、或者cookie 、localStorage等</td></tr><tr><td>搜索引擎优化(SEO)</td><td>需要单独方案、实现较为困难、不利于SEO检索 可利用服务器端渲染(SSR)优化</td><td>实现方法简易</td></tr><tr><td>试用范围</td><td>高要求的体验度、追求界面流畅的应用</td><td>适用于追求高度支持搜索引擎的应用</td></tr><tr><td>开发成本</td><td>较高，常需借助专业的框架</td><td>较低 ，但页面重复代码多</td></tr><tr><td>维护成本</td><td>相对容易</td><td>相对复杂</td></tr></tbody></table><p>以下是我们今天要解决的问题：</p><pre><code>这些框架或库有多成熟？这些框架只会火热一时吗？这些框架相应的社区规模有多大，能得到多少帮助？找到每个框架开发者容易吗？这些框架的基本编程概念 是什么？对于小型或大型应用程序，框架是否易用？每个框架学习曲线什么样？你期望这些框架的性能怎么样？在哪能仔细了解底层原理？你可以用你选择的框架开发吗？</code></pre><h5 id="生命周期与战略考虑"><a href="#生命周期与战略考虑" class="headerlink" title="生命周期与战略考虑"></a>生命周期与战略考虑</h5><p><code>Angular</code><br>是基于 TypeScript 的 Javascript 框架。由 Google 进行开发和维护，它被描述为“超级厉害的 JavaScript MVW 框架”。Angular（也被称为 “Angular 2+”，“Angular 2” 或者 “ng2”）已被重写，是与 AngularJS（也被称为 “Angular.js” 或 “AngularJS 1.x”）不兼容的后续版本。当 AngularJS（旧版本）最初于2010年10月发布时，仍然在修复 bug，等等 —— 新的 Angular（sans JS）于 2016 年 9 月推出版本 2。最新的主版本是 4，因为版本 3 被跳过了。Google，Vine，Wix，Udemy，weather.com，healthcare.gov 和 Forbes 都使用 Angular（根据 madewithangular，stackshare 和 libscore.com 提供的数据）。</p><p><code>React</code><br>被描述为 “用于构建用户界面的 JavaScript 库”。React 最初于 2013 年 3 月发布，由 Facebook 进行开发和维护，Facebook 在多个页面上使用 React 组件（但不是作为单页应用程序）。根据 Chris Cordle 这篇文章的统计，React 在 Facebook 上的使用远远多于 Angular 在 Google 上的使用。React 还被 Airbnb，Uber，Netflix，Twitter，Pinterest，Reddit，Udemy，Wix，Paypal，Imgur，Feedly，Stripe，Tumblr，Walmart 等使用（根据 Facebook, stackshare 和 libscore.com 提供的数据）。<br>Facebook 正在开发 React Fiber。它会改变 React 的底层 - 渲染速度应该会更快 - 但是在变化之后，版本会向后兼容。Facebook 将会在 2017 年 4 月的开发者大会上讨论新变化，并发布一篇非官方的关于新架构的文章。React Fiber 可能与 React 16 一起发布。</p><p><code>Vue</code><br>是 2016 年发展最为迅速的 JS 框架之一。Vue 将自己描述为一款“用于构建直观，快速和组件化交互式界面的 MVVM 框架”。它于 2014 年 2 月首次由 Google 前员工 Evan You 发布（顺便说一句：尤雨溪那时候发表了一篇 vue 发布首周的营销活动和数据的博客文章）。尤其是考虑到 Vue 在没有大公司的支持的情况下，作为一个人开发的框架还能获得这么多的吸引力，这无疑是非常成功的。尤雨溪目前有一个包含数十名核心开发者的团队。2016 年，版本 2 发布。Vue 被阿里巴巴，百度，Expedia，任天堂，GitLab 使用 — 可以在 madewithvuejs.com 找到一些小型项目的列表。</p><p>Angular 和 Vue 都遵守 MIT license 许可，而 React 遵守 BSD3-license 许可证。在专利文件上有很多讨论。James Ide（前 Facebook 工程师）解释专利文件背后的原因和历史：Facebook 的专利授权是在保护自己免受专利诉讼的能力的同时分享其代码。专利文件被更新了一次，有些人声称，如果你的公司不打算起诉 Facebook，那么使用 React 是可以的。你可以在 Github 的这个 issue 上 查看讨论。我不是律师，所以如果 React 许可证对你或你的公司有问题，你应该自己决定。关于这个话题还有很多文章：Dennis Walsh 写到，你为什么不该害怕。Raúl Kripalani 警告：反对创业公司使用 React，他还写了一篇备忘录概览。此外，Facebook 上还有一个最新的声明：解释 React 的许可证。</p><h5 id="核心开发"><a href="#核心开发" class="headerlink" title="核心开发"></a>核心开发</h5><p>如前所述，Angular 和 React 得到大公司的支持和使用。Facebook，Instagram 和 WhatsApp 正在它们的页面使用 React。Google 在很多项目中使用 Angular，例如，新的 Adwords 用户界面是使用 Angular 和 Dart。然而，Vue 是由一群通过 Patreon 和其他赞助方式支持的个人实现的，是好坏你自己确定。Matthias Götzke 认为 Vue 小团队的好处是用了更简洁和更少的过度设计的代码或 API。<br>我们来看看一些统计数据：Angular 在团队介绍页列出 36 人，Vue 列出 16 人，而 React 没有团队介绍页。在 Github 上，Angular 有 25,000+ 的 star 和 463 位代码贡献者，React 有 70,000+ 的 star 和 1,000+ 位代码贡献者，而 Vue 有近 60,000 的 star 和只有 120 位代码贡献者。你也可以查看 Angular，React 和 Vue 的 Github Star 历史。又一次说明 Vue 的趋势似乎很好。根据 bestof.js 提供的数据显示，在过去三个月 Angular 2 平均每天获得 31 个 star，React 74 个，Vue.JS 107 个。</p><p>那我们试试别的吧。ThoughtWorks 的 Technology Radar 技术随时间推移的变化。ThoughtWorks 的 Technology Radar 随着时间推移，技术的演进过程给人深刻的印象。Redux 是在采用阶段（被 ThoughtWorks 项目采用的！），它在许多 ThoughtWorks 项目中的价值是不可估量的。Vue.js 是在试用阶段（被试着用的）。Vue被描述为具有平滑学习曲线的，轻量级并具灵活性的Angular的替代品。Angular 2 是正在处于评估阶段 使用 —— 已被 ThoughtWork 团队成功实践，但是还没有被强烈推荐。</p><p>根据 2017 年 Stackoverflow 的最新调查，被调查的开发者中，喜爱 React 有 67%，喜欢 AngularJS 的有 52%。“没有兴趣在开发中继续使用”的开发者占了更高的数量，AngularJS（48%）和 React（33%）。在这两种情况下，Vue 都不在前十。然后是 statejs.com 关于比较 “前端框架” 的调查。最有意思的事实是：React 和 Angular 有 100% 的认知度，23% 的受访者不了解 Vue。关于满意度，92% 的受访者愿意“再次使用” React ，Vue 有 89% ,而 Angular 2 只有 65%。</p><h5 id="长期支持和迁移"><a href="#长期支持和迁移" class="headerlink" title="长期支持和迁移"></a>长期支持和迁移</h5><p>Facebook 在其设计原则中指出，React API 非常稳定。还有一些脚本可以帮助你从当前的API移到更新的版本：请查阅 react-codemod。迁移是非常容易的，没有这样的东西（需要）作为长期支持的版本。在 Reddit 这篇文章中指出，人们看到到升级从来不是问题。React 团队写了一篇关于他们版本控制方案的博客文章。当他们添加弃用警告时，在下一个主要版本中的行为发生更改之前，他们会保留当前版本的其余部分。没有计划更改为新的主要版本 - v14 于 2015 年 10 月发布，v15 于 2016 年 4 月发布，而 v16 还没有发布日期。（译者注：v16 于 2017 年 9 月底发布）最近 React核心开发人员指出，升级不应该是一个问题。</p><p>关于 Angular，从 v2 发布开始，有一篇关于版本管理和发布 Angular 的博客文章。每六个月会有一次重大更新，至少有六个月的时间（两个主要版本）。在文档中有一些实验性的 API 被标记为较短的弃用期。目前还没有官方公告，但根据这篇文章，Angular 团队已经宣布了以 Angular 4 开始的长期支持版本。这些将在下一个主要版本发布之后至少一年得到支持。这意味着至少在 2018 年 9 月之前，将支持 Angular 4，并提供 bug 修复和重要补丁。在大多数情况下，将 Angular 从 v2 更新到 v4 与更新 Angular 依赖关系一样简单。Angular 还提供了有关是否需要进一步更改的信息指南。</p><p>Vue 1.x 到 2.0 的更新过程对于一个小应用程序来说应该很容易 - 开发者团队已经声称 90% 的 API 保持不变。在控制台上有一个很好的升级 - 诊断迁移 - 辅助工具。一位开发人员指出，从 v1 到 v2 的更新在大型应用程序中仍然没有挑战。不幸的是，关于 LTS 版本的下一个主要版本或计划信息没有清晰的（公共）路径。<br>还有一件事：Angular 是一个完整的框架，提供了很多捆绑在一起的东西。React 比 Angular 更灵活，你可能会使用更多独立的，不稳定的，快速更新的库 - 这意味着你需要自己维护相应的更新和迁移。如果某些包不再被维护，或者其他一些包在某些时候成为事实上的标准，这也可能是不利的。</p><h4 id="React，Angular-和-Vue-的比较"><a href="#React，Angular-和-Vue-的比较" class="headerlink" title="React，Angular 和 Vue 的比较"></a>React，Angular 和 Vue 的比较</h4><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>我们所讨论的框架都是基于组件的。一个组件得到一个输入，并且在一些内部的行为/计算之后，它返回一个渲染的 UI 模板（一个登录/注销区或一个待办事项列表项）作为输出。定义的组件应该易于在网页或其他组件中重用。例如，你可以使用具有各种属性（列，标题信息，数据行等）的网格组件（由一个标题组件和多个行组件组成），并且能够在另一个页面上使用具有不同数据集的组件。这里有一篇关于组件的综合性文章，如果你想了解更多这方面的信息。<br>React 和 Vue 都擅长处理组件：小型的无状态的函数接收输入和返回元素作为输出。</p><h5 id="Typescript，ES6-与-ES5React"><a href="#Typescript，ES6-与-ES5React" class="headerlink" title="Typescript，ES6 与 ES5React"></a>Typescript，ES6 与 ES5React</h5><p>专注于使用 Javascript ES6。Vue 使用 Javascript ES5 或 ES6。<br>Angular 依赖于 TypeScript。这在相关示例和开源项目中提供了更多的一致性（React 示例可以在 ES5 或 ES6 中找到）。这也引入了像装饰器和静态类型的概念。静态类型对于代码智能工具非常有用，比如自动重构，跳转到定义等等 - 它们也可以减少应用程序中的错误数量，尽管这个话题当然没有共识。Eric Elliott 在他的文章 “静态类型的令人震惊的秘密” 中不同意上面的观点。Daniel C Wang 表示，使用静态类型并没有什么坏处，同时有测试驱动开发（TDD）和静态类型挺好的。<br>你也应该知道你可以使用 Flow 在 React 中启用类型检查。这是 Facebook 为 JavaScript 开发的静态类型检查器。Flow 也可以集成到 VueJS 中。<br>如果你在用 TypeScript 编写代码，那么你不需要再编写标准的 JavaScript 了。尽管它在不断发展，但与整个 JavaScript 语言相比，TypeScript 的用户群仍然很小。一个风险可能是你正在向错误的方向发展，因为 TypeScript 可能 - 也许不太可能 - 随着时间的推移也会消失。此外，TypeScript 为项目增加了很多（学习）开销 - 你可以在 Eric Elliott 的 Angular 2 vs. React 比较 中阅读更多关于这方面的内容。<br>更新: James Ravenscroft 在对这篇文章的评论中写道，TypeScript 对 JSX 有一流的支持 - 可以无缝地对组件进行类型检查。所以，如果你喜欢 TypeScript 并且你想使用 React，这应该不成问题。</p><h5 id="模板-——-JSX-还是-HTMLReact"><a href="#模板-——-JSX-还是-HTMLReact" class="headerlink" title="模板 —— JSX 还是 HTMLReact"></a>模板 —— JSX 还是 HTMLReact</h5><p>打破了长期以来的最佳实践。几十年来，开发人员试图分离 UI 模板和内联的 Javascript 逻辑，但是使用 JSX，这些又被混合了。这听起来很糟糕，但是你应该听彼得·亨特（Peter Hunt）的演讲 “React：反思最佳实践”（2013 年 10 月）。他指出，分离模板和逻辑仅仅是技术的分离，而不是关注的分离。你应该构建组件而不是模板。组件是可重用的、可组合的、可单元测试的。<br>JSX 是一个类似 HTML 语法的可选预处理器，并随后在 JavaScript 中进行编译。JSX 有一些怪癖 —— 例如，你需要使用 className 而不是 class，因为后者是 Javascript 的保留字。JSX 对于开发来说是一个很大的优势，因为代码写在同一个地方，可以在代码完成和编译时更好地检查工作成果。当你在 JSX 中输入错误时，React 将不会编译，并打印输出错误的行号。Angular 2 在运行时静默失败（如果使用 Angular 中的预编译，这个参数可能是无效的）。<br>JSX 意味着 React 中的所有内容都是 Javascript – 用于JSX模板和逻辑。Cory House 在 2016 年 1 月的文章 中指出：“Angular 2 继续把 ‘JS’ 放到 HTML 中。React 把 ‘HTML’ 放到 JS 中。“这是一件好事，因为 Javascript 比 HTML 更强大。<br>Angular 模板使用特殊的 Angular 语法（比如 ngIf 或 ngFor）来增强 HTML。虽然 React 需要 JavaScript 的知识，但 Angular 会迫使你学习 Angular 特有的语法。<br>Vue 具有“单个文件组件”。这似乎是对于关注分离的权衡 - 模板，脚本和样式在一个文件中，但在三个不同的有序部分中。这意味着你可以获得语法高亮，CSS 支持以及更容易使用预处理器（如 Jade 或 SCSS）。我已经阅读过其他文章，JSX 更容易调试，因为 Vue 不会显示不规范 HTML 的语法错误。这是不正确的，因为 Vue 转换 HTML 来渲染函数 - 所以错误显示没有问题（感谢 Vinicius Reis 的评论和更正！）。</p><blockquote><p>旁注：如果你喜欢 JSX 的思路，并想在 Vue 中使用它，可以使用 babel-plugin-transform-vue-jsx。</p></blockquote><h5 id="框架和库"><a href="#框架和库" class="headerlink" title="框架和库"></a>框架和库</h5><p>Angular 是一个框架而不是一个库，因为它提供了关于如何构建应用程序的强有力的约束，并且还提供了更多开箱即用的功能。Angular 是一个 “完整的解决方案” - 功能齐全，你可以愉快的开始开发。你不需要研究库，路由解决方案或类似的东西 - 你只要开始工作就好了。<br>另一方面，React 和 Vue 是很灵活的。他们的库可以和各种包搭配。（在 npm 上有很多 React 的包，但 Vue 的包比较少，因为毕竟这个框架还比较新）。有了 React，你甚至可以交换库本身的 API 兼容替代品，如 Inferno。然而，灵活性越大，责任就越大 - React 没有规则和有限的指导。每个项目都需要决定架构，而且事情可能更容易出错。<br>另一方面，Angular 还有一个令人困惑的构建工具，样板，检查器（linter）和时间片来处理。如果使用项目初始套件或样板，React 也是如此。他们自然是非常有帮助的，但是 React 可以开箱即用，这也许是你应该学习的方式。有时，在 JavaScript 环境中工作要使用各种工具被称为 “Javascript 疲劳症”。Eric Clemmons 在他的文章 中说：</p><p>当开始使用框架，还有一堆安装的工具，你可能会不习惯。这些都是框架生成的。很多开发人员不明白，框架内部发生了什么 —— 或者需要花费很多时间才能搞明白。</p><p>Vue 似乎是三个框架中最轻量的。GitLab 有一篇关于 Vue.js（2016 年 10 月）的决定的博客文章：</p><p>Vue.js 完美的兼顾了它将为你做什么和你需要做什么。（…）Vue.js 始终是可及的，一个坚固，但灵活的安全网，保证编程效率和把操作 DOM 造成的痛苦降到最低。</p><p>他们喜欢简单易用 —— 源代码非常易读，不需要任何文档或外部库。一切都非常简单。Vue.js “对任何东西都不做大的假设”。还有一个关于 GitLab 决定的播客节目。<br>另一个来自 Pixeljets 的关于向 Vue 转变的博文。React “是 JS 界在意识层面向前迈出的一大步，它以一种实用简洁的方式向人们展示了真正的函数式编程。和 Vue 相比，React 的一大缺点是由于 JSX 的限制，组件的粒度会更小。这里是文章的引述：</p><p>对于我和我的团队来说，代码的可读性是很重要的，但编写代码很有趣也是非常重要的。在实现真正简单的计算器小部件时创建 6 个组件并不奇怪。在许多情况下，在维护，修改或对某个小部件进行可视化检查方面也是不好的，因为你需要绕过多个文件/函数并分别检查每个小块的 HTML。再次，我不是建议写巨石 - 我建议在日常开发中使用组件而不是微组件。</p><p>关于 Hacker news 和 Reddit 上的博客文章有趣的讨论 - 有来自 Vue 的持异议者和进一步支持者的争论。<br>状态管理和数据绑定构建用户界面很困难，因为处处都有状态 - 随着时间的推移而变化的数据带来了复杂性。定义的状态工作流程对于应用程序的增长和复杂性有很大的帮助。对于复杂度不大的应用程序，就不必定义的状态流了，像原生 JS 就足够了。<br>它是如何工作的？组件在任何时间点描述 UI。当数据改变时，框架重新渲染整个 UI 组件 - 显示的数据始终是最新的。我们可以把这个概念称为“ UI 即功能”。<br>React 经常与 Redux 在一起使用。Redux 以三个基本原则来自述：</p><p>单一数据源（Single source of truth）<br>State 是只读的（State is read-only）<br>使用纯函数执行修改（Changes are made with pure functions）</p><p>换句话说：整个应用程序的状态存储在单个 store 的状态树中。这有助于调试应用程序，一些功能更容易实现。状态是只读的，只能通过 action 来改变，以避免竞争条件（这也有助于调试）。编写 Reducer 来指定如何通过 action 来转换 state。<br>大多数教程和样板文件都已经集成了 Redux，但是如果没有它，你可以使用 React（你可能不需要在你的项目中使用 Redux）。Redux 在代码中引入了复杂性和相当强的约束。如果你正在学习React，那么在你要使用 Redux 之前，你应该考虑学习纯粹的 React。你绝对应该阅读 Dan Abramov 的“你可能不需要 Redux”。<br>有些开发人员 建议使用 Mobx 代替 Redux。你可以把它看作是一个 “自动的 Redux”，这使得事情一开始就更容易使用和理解。如果你想了解，你应该从介绍开始。你也可以阅读 Robin 的 Redux 和 MobX 的比较。他还提供了有关从 Redux 迁移到 MobX 的信息。如果你想查找其他 Flux 库，这个列表非常有用。如果你是来自 MVC 的世界，那么你应该阅读 Mikhail Levkovsky 的文章“Redux 中的思考（当你所知道的是 MVC）”。<br>Vue 可以使用 Redux，但它提供了 Vuex 作为自己的解决方案。<br>React 和 Angular 之间的巨大差异是 单向与双向绑定。当 UI 元素（例如，用户输入）被更新时，Angular 的双向绑定改变 model 状态。React 只有一种方法：先更新 model，然后渲染 UI 元素。Angular 的方式实现起来代码更干净，开发人员更容易实现。React 的方式会有更好的数据总览，因为数据只能在一个方向上流动（这使得调试更容易）。<br>这两个概念各有优劣。你需要了解这些概念，并确定这是否会影响你选择框架。文章“双向数据绑定：Angular 2 和 React”和这个 Stackoverflow 上的问题都提供了一个很好的解释。在这里你可以找到一些交互式的代码示例（3 年前的示例（，只适用于 Angular 1 和 React）。最后，Vue 支持单向绑定和双向绑定（默认为单向绑定）。<br>如果你想进一步阅读，这有一篇长文，是有关状态的不同类型和 Angular 应用程序中的状态管理（Victor Savkin）。<br>其他的编程概念Angular 包含依赖注入（dependency injection），即一个对象将依赖项（服务）提供给另一个对象（客户端）的模式。这导致更多的灵活性和更干净的代码。文章 “理解依赖注入” 更详细地解释了这个概念。<br>模型 - 视图 - 控制器模式（MVC）将项目分为三个部分：模型，视图和控制器。Angular（MVC 模式的框架）有开箱即用的 MVC 特性。React 只有 V —— 你需要自己解决 M 和 C。<br>灵活性与精简到微服务你可以通过仅仅添加 React 或 Vue 的 JavaScript 库到你的源码中的方式去使用它们。但是由于 Angular 使用了 TypeScript，所以不能这样使用 Angular。<br>现在我们正在更多地转向微服务和微应用。React 和 Vue 通过只选择真正需要的东西，你可以更好地控制应用程序的大小。它们提供了更灵活的方式去把一个老应用的一部分从单页应用（SPA）转移到微服务。Angular 最适合单页应用（SPA），因为它可能太臃肿而不能用于微服务。<br>正如 Cory House 所说:</p><p>JavaScript 发展速度很快，而且 React 可以让你将应用程序的一小部分替换成更好用的 JS 库，而不是期待你的框架能够创新。小巧，可组合的单一用途工具的理念永远不会过时。</p><p>有些人对非单页的网站也使用 React（例如复杂的表单或向导）。甚至 Facebook 都没有把 React 用在 Facebook 的主页，而是用在特定的页面，实现特定的功能。<br>体积和性能任何框架都不会十全十美：Angular 框架非常臃肿。gzip 文件大小为 143k，而 Vue 为 23K，React 为 43k。<br>为了提高性能，React 和 Vue 都使用了虚拟 DOM（Virtual DOM）。如果你对此感兴趣，可以阅读虚拟 DOM 和 DOM 之间的差异以及 react.js 中虚拟 DOM 的实际优势。此外，虚拟 DOM 的作者之一在 Stackoverflow 上回答了性能的相关问题。<br>为了检查性能，我看了一下最佳的 js 框架基准。你可以自己下载并运行它，或者查看交互式结果表。</p><p>Angular，React 和 Vue 性能比较（源文件）</p><p>内存分配（源文件）<br>总结一下：Vue 有着很好的性能和高深的内存分配技巧。如果比较快慢的话，这些框架都非常接近（比如 Inferno）。请记住，性能基准只能作为考虑的附注，而不是作为判断标准。<br>测试Facebook 使用 Jest 来测试其 React 代码。这里有篇 Jest 和 Mocha 之间的比较的文章 —— 还有一篇关于 Enzyme 和 Mocha 如何一起使用 的文章。Enzyme 是 Airbnb 使用的 JavaScript 测试工具（与 Jest，Karma 和其他测试框架一起使用）。如果你想了解更多，有一些关于在 React（这里和这里）测试的旧文章。<br>Angular 2 中使用 Jasmine 作为测试框架。Eric Elliott 在一篇文章中抱怨说 Jasmine “有数百种测试和断言的方式，需要仔细阅读每一个，来了解它在做什么”。输出也是非常臃肿和难以阅读。有关 Angular 2 与 Karma 和 Mocha 的整合的一些有用的文章。这里有一个关于 Angular 2 测试策略的旧视频（从2015年起）。<br>Vue 缺乏测试指导，但是 Evan 在 2017 年的展望中写道，团队计划在这方面开展工作。他们推荐使用 Karma。Vue 和 Jest 结合使用，还有 avoriaz 作为测试工具。<br>通用与原生 app通用 app 正在将应用程序引入 web、搬上桌面，同样将深入原生 app 的世界。<br>React 和 Angular 都支持原生开发。Angular 拥有用于原生应用的 NativeScript（由 Telerik 支持）和用于混合开发的 Ionic 框架。借助 React，你可以试试 react-native-renderer 来构建跨平台的 iOS 和 Android 应用程序，或者用 react-native 开发原生 app。许多 app（包括 Facebook；查看更多的展示）都是用 react-native 构建的。<br>Javascript 框架在客户端上渲染页面。这对于性能，整体用户体验和 SEO 是不利的。服务器端预渲染是一个好办法。所有这三个框架都有相应的库来实现服务端渲染。React 有 next.js，Vue 有 nuxt.js，而 Angular 有…… Angular Universal。<br>学习曲线Angular 的学习曲线确实很陡。它有全面的文档，但你仍然可能被吓哭，因为说起来容易做起来难。即使你对 Javascript 有深入的了解，也需要了解框架的底层原理。去初始化项目是很神奇的，它会引入很多的包和代码。因为有一个大的，预先存在的生态系统，你需要随着时间的推移学习，这很不利。另一方面，由于已经做出了很多决定，所以在特定情况下可能会很好。对于 React，你可能需要针对第三方库进行大量重大决策。仅仅 React 中就有 16 种不同的 flux 软件包来用于状态管理可供选择。<br>Vue 学习起来很容易。公司转向 Vue 是因为它对初级开发者来说似乎更容易一些。这里有一片说他们团队为什么从 Angular 转到 Vue的文章。另一位用户表示，他公司的 React 应用程序非常复杂，以至于新开发人员无法跟上代码。有了 Vue，初级和高级开发人员之间的差距缩小了，他们可以更轻松地协作，减少 bug，减少解决问题的时间。<br>有些人说他们用 React 做的东西比用 Vue 做的更好。如果你是一个没有经验的 Javascript 开发人员 - 或者如果你在过去十年中主要使用 jQuery，那么你应该考虑使用 Vue。转向 React 时，思维方式的转换更为明显。Vue 看起来更像是简单的 Javascript，同时也引入了一些新的概念：组件，事件驱动模型和单向数据流。这同样是很小的部分。<br>同时，Angular 和 React 也有自己的实现方式。它们可能会限制你，因为你需要调整自己的做法，才能顺畅的开发。这可能是一个缺点，因为你不能随心所欲，而且学习曲线陡峭。这也可能是一个好处，因为你在学习技术时必须学习正确的概念。用 Vue，你可以用老方法来做。这一开始可能会比较容易上手，但长此以往会出现问题。<br>在调试方面，React 和 Vue 的黑魔法更少是一个加分项。找出 bug 更容易，因为需要看的地方少了，堆栈跟踪的时候，自己的代码和那些库之间有更明显的区别。使用 React 的人员报告说，他们永远不必阅读库的源代码。但是，在调试 Angular 应用程序时，通常需要调试 Angular 的内部来理解底层模型。从好的一面来看，从 Angular 4 开始，错误信息应该更清晰，更具信息性。<br>Angular, React 和 Vue 底层原理你想自己阅读源代码吗？你想看看事情到底是怎么样的吗？<br>可能首先要查看 Github 仓库: React（github.com/facebook/re…）、Angular（github.com/angular/ang…）和 Vue（github.com/vuejs/vue）。<br>语法看起来怎么样？ValueCoders 比较 Angular，React 和 Vue 的语法。<br>在生产环境中查看也很容易 —— 连同底层的源代码。TodoMVC 列出了几十个相同的 Todo 应用程序，用不同的 Javascript 框架编写 —— 你可以比较 Angular，React 和 Vue 的解决方案。RealWorld 创建了一个真实世界的应用程序（中仿），他们已经准备好了 Angular（4+）和 React（带 Redux ）的解决方案。Vue 的开发正在进行中。<br>你可以看到许多真实的 app，以下是 React 的方案：</p><p>Do（一款很好用的笔记管理 app，用 React 和 Redux 实现）<br>sound-redux（用 React 和 Redux 实现的 Soundcloud 客户端）<br>Brainfock（用 React 实现的项目和团队管理解决方案）<br>react-hn 和 react-news（仿 Hacker news）<br>react-native-whatsapp-ui 和 教程（仿 Whatsapp 的 react-native 版）<br>phoenix-trello（仿 Trello）<br>slack-clone 和其他教程 (仿Slack)</p><p>以下是 Angular 版的 app：</p><p>angular2-hn 和 hn-ng2（仿 Hacker News，另一个由 Ashwin Sureshkumar 创建的很好的教程）<br>Redux-and-angular-2（仿 Twitter）</p><p>以下是 Vue 版的 app：</p><p>vue-hackernews-2.0 和 Loopa news（仿Hacker News）<br>vue-soundcloud（Soundcloud 演示）</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;比较-Angular、React、Vue-三剑客&quot;&gt;&lt;a href=&quot;#比较-Angular、React、Vue-三剑客&quot; class=&quot;headerlink&quot; title=&quot;比较 Angular、React、Vue 三剑客&quot;&gt;&lt;/a&gt;比较 Angular、React、Vue 三剑客&lt;/h3&gt;&lt;p&gt;为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 Angular 和 React 非常流行，并且最近出现的新贵 VueJS 同样博得了很多人的关注。更重要的是，这只是一些新起之秀。&lt;/p&gt;&lt;h5 id=&quot;在开始之前-——-是否应用单页-Web-应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页-Web-应用程序（MPA）”。&quot;&gt;&lt;a href=&quot;#在开始之前-——-是否应用单页-Web-应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页-Web-应用程序（MPA）”。&quot; class=&quot;headerlink&quot; title=&quot;在开始之前 —— 是否应用单页 Web 应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页 Web 应用程序（MPA）”。&quot;&gt;&lt;/a&gt;在开始之前 —— 是否应用单页 Web 应用开发？首先你需要弄明白你需要单页面应用程序（SPA）还是多页面的方式。关于这个问题的详细内容请阅读我的博客文章，“单页面应用程序（SPA）与多页 Web 应用程序（MPA）”。&lt;/h5&gt;&lt;p&gt;具体对比分析：&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://algate.coding.me/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="三剑客" scheme="https://algate.coding.me/tags/%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://algate.coding.me/2018/06/09/JS%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/"/>
    <id>https://algate.coding.me/2018/06/09/JS进阶-继承/</id>
    <published>2018-06-09T07:46:30.000Z</published>
    <updated>2019-02-27T05:20:32.582Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>引用网上的一张图<br><img src="/hexo.pure/images/posts/js/inherit/01.png" alt=""></p><blockquote><p>简单概括就四句话<br>1.实例的<strong>proto</strong> === 构造函数的prototype<br>2.构造函数的<strong>proto</strong> === Function.prototye<br>3.构造函数原型(Array.prototype)的<strong>proto</strong> === Object.prototype(对象的原型)<br>4.Object.prototype.<strong>proto</strong> === null;</p></blockquote><h4 id="js中有三种继承方式"><a href="#js中有三种继承方式" class="headerlink" title="js中有三种继承方式"></a>js中有三种继承方式</h4><h5 id="1-js原型（prototype）实现继承"><a href="#1-js原型（prototype）实现继承" class="headerlink" title="1.js原型（prototype）实现继承"></a>1.js原型（prototype）实现继承</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function Person(name,age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sayHello=function()&#123;</span><br><span class="line">        alert(&quot;使用原型得到Name：&quot;+this.name);</span><br><span class="line">    &#125;</span><br><span class="line">    var per=new Person(&quot;马小倩&quot;,21);</span><br><span class="line">    per.sayHello(); //输出：使用原型得到Name:马小倩</span><br><span class="line"></span><br><span class="line">    function Student()&#123;&#125;</span><br><span class="line">    Student.prototype=new Person(&quot;洪如彤&quot;,21);</span><br><span class="line">    var stu=new Student();</span><br><span class="line">    Student.prototype.grade=5;</span><br><span class="line">    Student.prototype.intr=function()&#123;</span><br><span class="line">        alert(this.grade);</span><br><span class="line">    &#125;</span><br><span class="line">    stu.sayHello();//输出：使用原型得到Name:洪如彤</span><br><span class="line">    stu.intr();//输出：5</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-构造函数实现继承"><a href="#2-构造函数实现继承" class="headerlink" title="2.构造函数实现继承"></a>2.构造函数实现继承</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function  Parent(name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.sayParent=function()&#123;</span><br><span class="line">            alert(&quot;Parent:&quot;+this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  Child(name,age)&#123;</span><br><span class="line">        this.tempMethod=Parent;</span><br><span class="line">        this.tempMethod(name);</span><br><span class="line">        this.age=age;</span><br><span class="line">        this.sayChild=function()&#123;</span><br><span class="line">            alert(&quot;Child:&quot;+this.name+&quot;age:&quot;+this.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var parent=new Parent(&quot;江剑臣&quot;);</span><br><span class="line">    parent.sayParent(); //输出：“Parent:江剑臣”</span><br><span class="line">    var child=new Child(&quot;李鸣&quot;,24); //输出：“Child:李鸣 age:24”</span><br><span class="line">    child.sayChild();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="3-call-apply实现继承"><a href="#3-call-apply实现继承" class="headerlink" title="3.call , apply实现继承"></a>3.call , apply实现继承</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function  Person(name,age,love)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">        this.love=love;</span><br><span class="line">        this.say=function say()&#123;</span><br><span class="line">            alert(&quot;姓名：&quot;+name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //call方式</span><br><span class="line">    function student(name,age)&#123;</span><br><span class="line">        Person.call(this,name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //apply方式</span><br><span class="line">    function teacher(name,love)&#123;</span><br><span class="line">        Person.apply(this,[name,love]);</span><br><span class="line">        //Person.apply(this,arguments); //跟上句一样的效果，arguments</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //call与aplly的异同：</span><br><span class="line">    //1,第一个参数this都一样,指当前对象</span><br><span class="line">    //2,第二个参数不一样：call的是一个个的参数列表；apply的是一个数组（arguments也可以）</span><br><span class="line"></span><br><span class="line">    var per=new Person(&quot;武凤楼&quot;,25,&quot;魏荧屏&quot;); //输出：“武凤楼”</span><br><span class="line">    per.say();</span><br><span class="line">    var stu=new student(&quot;曹玉&quot;,18);//输出：“曹玉”</span><br><span class="line">    stu.say();</span><br><span class="line">    var tea=new teacher(&quot;秦杰&quot;,16);//输出：“秦杰”</span><br><span class="line">    tea.say();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>有如下代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var A = function(x) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.say = function() &#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">a = new A(3);</span><br><span class="line">a.say();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p></p><!-- more --><p>如果改成es6的写法：</p><pre><code>class A {    constructor(x){        this.x = x;    }    say(){        console.log(this.x);    }}</code></pre><p>我们要定义一个B，让B继承A的方法；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// B继承A</span><br><span class="line">var B = function(x) &#123;</span><br><span class="line">    A.call(this, x)  // 继承x</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = new A(); // 继承A的原型</span><br><span class="line">var b = new B(5);</span><br><span class="line">b.say();</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure><p>如果写成es6语法的继承：<br>// C继承A</p><pre><code>class C extends A{};var c = new C(6);c.say();console.log(c);</code></pre><p>把数字转换成数组</p><pre><code>class NumPrototype {    constructor(x) {        this.x = x;    }    get iterate() {        return this.iterateF();    }    iterateF () {        var result = [];        for (var i = 0; i &lt;= this.x; i++) {            result.push(i);        }        return result;    }};var no = new NumPrototype(8);var arr = no.iterate;console.log(arr, no.iterate);</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;引用网上的一张图&lt;br&gt;&lt;img src=&quot;/hexo.pure/images/posts/js/inherit/01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;简单概括就四句话&lt;br&gt;1.实例的&lt;strong&gt;proto&lt;/strong&gt; === 构造函数的prototype&lt;br&gt;2.构造函数的&lt;strong&gt;proto&lt;/strong&gt; === Function.prototye&lt;br&gt;3.构造函数原型(Array.prototype)的&lt;strong&gt;proto&lt;/strong&gt; === Object.prototype(对象的原型)&lt;br&gt;4.Object.prototype.&lt;strong&gt;proto&lt;/strong&gt; === null;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;js中有三种继承方式&quot;&gt;&lt;a href=&quot;#js中有三种继承方式&quot; class=&quot;headerlink&quot; title=&quot;js中有三种继承方式&quot;&gt;&lt;/a&gt;js中有三种继承方式&lt;/h4&gt;&lt;h5 id=&quot;1-js原型（prototype）实现继承&quot;&gt;&lt;a href=&quot;#1-js原型（prototype）实现继承&quot; class=&quot;headerlink&quot; title=&quot;1.js原型（prototype）实现继承&quot;&gt;&lt;/a&gt;1.js原型（prototype）实现继承&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function Person(name,age)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name=name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.age=age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person.prototype.sayHello=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&amp;quot;使用原型得到Name：&amp;quot;+this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var per=new Person(&amp;quot;马小倩&amp;quot;,21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    per.sayHello(); //输出：使用原型得到Name:马小倩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function Student()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student.prototype=new Person(&amp;quot;洪如彤&amp;quot;,21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var stu=new Student();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student.prototype.grade=5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student.prototype.intr=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(this.grade);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stu.sayHello();//输出：使用原型得到Name:洪如彤&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stu.intr();//输出：5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="继承" scheme="https://algate.coding.me/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Js - 事件委托</title>
    <link href="https://algate.coding.me/2018/06/08/Js-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>https://algate.coding.me/2018/06/08/Js-事件委托/</id>
    <published>2018-06-08T10:41:30.000Z</published>
    <updated>2019-02-27T03:27:59.580Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --><p>原文地址：<a href="https://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="noopener">js中的事件委托或是事件代理详解</a></p><h4 id="那什么叫事件委托呢？"><a href="#那什么叫事件委托呢？" class="headerlink" title="那什么叫事件委托呢？"></a>那什么叫事件委托呢？</h4><p>它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理：</p><p>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。<br><a id="more"></a></p><p>这里其实还有2层意思的：</p><p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p><p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p><h4 id="为什么要用事件委托："><a href="#为什么要用事件委托：" class="headerlink" title="为什么要用事件委托："></a>为什么要用事件委托：</h4><p>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p><p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p><h4 id="事件委托的原理："><a href="#事件委托的原理：" class="headerlink" title="事件委托的原理："></a>事件委托的原理：</h4><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p><h4 id="事件委托怎么实现："><a href="#事件委托怎么实现：" class="headerlink" title="事件委托怎么实现："></a>事件委托怎么实现：</h4><p>终于到了本文的核心部分了，哈哈，在介绍事件委托的方法之前，我们先来看一段一般方法的例子：</p><p>子节点实现相同的功能：</p><pre><code>&lt;ul id=&quot;ul1&quot;&gt;    &lt;li&gt;111&lt;/li&gt;    &lt;li&gt;222&lt;/li&gt;    &lt;li&gt;333&lt;/li&gt;    &lt;li&gt;444&lt;/li&gt;&lt;/ul&gt;</code></pre><p>实现功能是点击li，弹出123：</p><pre><code>window.onload = function(){    var oUl = document.getElementById(&quot;ul1&quot;);    var aLi = oUl.getElementsByTagName(&apos;li&apos;);    for(var i=0;i&lt;aLi.length;i++){        aLi[i].onclick = function(){            alert(123);        }    }}</code></pre><p>上面的代码的意思很简单，相信很多人都是这么实现的，我们看看有多少次的dom操作，首先要找到ul，然后遍历li，然后点击li的时候，又要找一次目标的li的位置，才能执行最后的操作，每次点击都要找一次li；</p><p>那么我们用事件委托的方式做又会怎么样呢？</p><pre><code>window.onload = function(){    var oUl = document.getElementById(&quot;ul1&quot;);    oUl.onclick = function(){        alert(123);    }}</code></pre><p>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：</p><p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）：</p><pre><code>window.onload = function(){　　var oUl = document.getElementById(&quot;ul1&quot;);　　oUl.onclick = function(ev){　　　　var ev = ev || window.event;　　　　var target = ev.target || ev.srcElement;　　　　if(target.nodeName.toLowerCase() == &apos;li&apos;){　 　　　　　　 alert(123);　　　　　　　  alert(target.innerHTML);　　　　}　　}}</code></pre><p>这样改下就只有点击li会触发事件了，且每次只执行一次dom操作，如果li数量很多的话，将大大减少dom的操作，优化的性能可想而知！</p><p>上面的例子是说li操作的是同样的效果，要是每个li被点击的效果都不一样，那么用事件委托还有用吗？</p><pre><code>&lt;div id=&quot;box&quot;&gt;    &lt;input type=&quot;button&quot; id=&quot;add&quot; value=&quot;添加&quot; /&gt;    &lt;input type=&quot;button&quot; id=&quot;remove&quot; value=&quot;删除&quot; /&gt;    &lt;input type=&quot;button&quot; id=&quot;move&quot; value=&quot;移动&quot; /&gt;    &lt;input type=&quot;button&quot; id=&quot;select&quot; value=&quot;选择&quot; /&gt;&lt;/div&gt;</code></pre><p>js</p><pre><code>window.onload = function(){    var Add = document.getElementById(&quot;add&quot;);    var Remove = document.getElementById(&quot;remove&quot;);    var Move = document.getElementById(&quot;move&quot;);    var Select = document.getElementById(&quot;select&quot;);    Add.onclick = function(){        alert(&apos;添加&apos;);    };    Remove.onclick = function(){        alert(&apos;删除&apos;);    };    Move.onclick = function(){        alert(&apos;移动&apos;);    };    Select.onclick = function(){        alert(&apos;选择&apos;);    }}</code></pre><p>上面实现的效果我就不多说了，很简单，4个按钮，点击每一个做不同的操作，那么至少需要4次dom操作，如果用事件委托，能进行优化吗？</p><pre><code>window.onload = function(){    var oBox = document.getElementById(&quot;box&quot;);    oBox.onclick = function (ev) {        var ev = ev || window.event;        var target = ev.target || ev.srcElement;        if(target.nodeName.toLocaleLowerCase() == &apos;input&apos;){            switch(target.id){                case &apos;add&apos; :                    alert(&apos;添加&apos;);                    break;                case &apos;remove&apos; :                    alert(&apos;删除&apos;);                    break;                case &apos;move&apos; :                    alert(&apos;移动&apos;);                    break;                case &apos;select&apos; :                    alert(&apos;选择&apos;);                    break;            }        }    }}</code></pre><p>用事件委托就可以只用一次dom操作就能完成所有的效果，比上面的性能肯定是要好一些的</p><p>现在讲的都是document加载完成的现有dom节点下的操作，那么如果是新增的节点，新增的节点会有事件吗？也就是说，一个新员工来了，他能收到快递吗？</p><p>看一下正常的添加节点的方法：</p><p>这是一般的做法，但是你会发现，新增的li是没有事件的，说明添加子节点的时候，事件没有一起添加进去，这不是我们想要的结果，那怎么做呢？一般的解决方案会是这样，将for循环用一个函数包起来，命名为mHover，如下：</p><pre><code>window.onload = function(){    var oBtn = document.getElementById(&quot;btn&quot;);    var oUl = document.getElementById(&quot;ul1&quot;);    var aLi = oUl.getElementsByTagName(&apos;li&apos;);    var num = 4;    function mHover () {        //鼠标移入变红，移出变白        for(var i=0; i&lt;aLi.length;i++){            aLi[i].onmouseover = function(){                this.style.background = &apos;red&apos;;            };            aLi[i].onmouseout = function(){                this.style.background = &apos;#fff&apos;;            }        }    }    //添加新节点    oBtn.onclick = function(){        num++;        var oLi = document.createElement(&apos;li&apos;);        oLi.innerHTML = 111*num;        oUl.appendChild(oLi);        mHover ();    };}</code></pre><p>虽然功能实现了，看着还挺好，但实际上无疑是又增加了一个dom操作，在优化性能方面是不可取的，那么有事件委托的方式，能做到优化吗？</p><pre><code>window.onload = function(){    var oBtn = document.getElementById(&quot;btn&quot;);    var oUl = document.getElementById(&quot;ul1&quot;);    var aLi = oUl.getElementsByTagName(&apos;li&apos;);    var num = 4;    //事件委托，添加的子元素也有事件    oUl.onmouseover = function(ev){        var ev = ev || window.event;        var target = ev.target || ev.srcElement;        if(target.nodeName.toLowerCase() == &apos;li&apos;){            target.style.background = &quot;red&quot;;        }    };    oUl.onmouseout = function(ev){        var ev = ev || window.event;        var target = ev.target || ev.srcElement;        if(target.nodeName.toLowerCase() == &apos;li&apos;){            target.style.background = &quot;#fff&quot;;        }    };    //添加新节点    oBtn.onclick = function(){        num++;        var oLi = document.createElement(&apos;li&apos;);        oLi.innerHTML = 111*num;        oUl.appendChild(oLi);    };}</code></pre><p>看，上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，这样可以大大的减少dom操作，这才是事件委托的精髓所在。</p><p>————————————————–华丽的分割线———————————————————</p><p>在这里先感谢一下@苍茫大地NV 的提问，提的问题非常好！👏👏👏</p><p>他的问题是：<br>现在给一个场景 ul &gt; li &gt; div &gt; p，div占满li，p占满div，还是给ul绑定时间，需要判断点击的是不是li（假设li里面的结构是不固定的），那么e.target就可能是p，也有可能是div，这种情况你会怎么处理呢？</p><pre><code>&lt;ul id=&quot;test&quot;&gt;    &lt;li&gt;        &lt;p&gt;11111111111&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;div&gt;            22222222        &lt;/div&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;span&gt;3333333333&lt;/span&gt;    &lt;/li&gt;    &lt;li&gt;4444444&lt;/li&gt;&lt;/ul&gt;</code></pre><p>如上列表，有4个li，里面的内容各不相同，点击li，event对象肯定是当前点击的对象，怎么指定到li上，下面我直接给解决方案：<br><br>var oUl = document.getElementById(‘test’);<br>oUl.addEventListener(‘click’,function(ev){<br>var target = ev.target;<br>while(target !== oUl ){<br>if(target.tagName.toLowerCase() == ‘li’){<br>console.log(‘li click~’);<br>break;<br>}<br>target = target.parentNode;<br>}<br>})<br>核心代码是while循环部分，实际上就是一个递归调用，你也可以写成一个函数，用递归的方法来调用，同时用到冒泡的原理，从里往外冒泡，知道currentTarget为止，当当前的target是li的时候，就可以执行对应的事件了，然后终止循环，恩，没毛病！</p><p>这里看不到效果，大家可以复制过去运行一下！<br>总结：</p><p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p><p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p><p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p><p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p><p>好了，今天就到这里，下次我想介绍一下事件绑定，欢迎大家关注和阅读，以上纯属个人见解，如有不对的地方，万望指正，不胜感谢！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://www.cnblogs.com/liugang-vip/p/5616484.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;js中的事件委托或是事件代理详解&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;那什么叫事件委托呢？&quot;&gt;&lt;a href=&quot;#那什么叫事件委托呢？&quot; class=&quot;headerlink&quot; title=&quot;那什么叫事件委托呢？&quot;&gt;&lt;/a&gt;那什么叫事件委托呢？&lt;/h4&gt;&lt;p&gt;它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理：&lt;/p&gt;&lt;p&gt;有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="事件委托" scheme="https://algate.coding.me/tags/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    
  </entry>
  
  <entry>
    <title>ES6-async 函数</title>
    <link href="https://algate.coding.me/2018/06/08/ES6-async%E5%87%BD%E6%95%B0/"/>
    <id>https://algate.coding.me/2018/06/08/ES6-async函数/</id>
    <published>2018-06-08T10:01:30.000Z</published>
    <updated>2019-02-27T03:27:59.535Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p><pre><code>const gen = function* () {  const f1 = yield readFile(&apos;/etc/fstab&apos;);  const f2 = yield readFile(&apos;/etc/shells&apos;);  console.log(f1.toString());  console.log(f2.toString());};</code></pre><p>写成async函数，就是下面这样。</p><pre><code>const asyncReadFile = async function () {  const f1 = await readFile(&apos;/etc/fstab&apos;);  const f2 = await readFile(&apos;/etc/shells&apos;);  console.log(f1.toString());  console.log(f2.toString());};</code></pre><a id="more"></a><p>一比较就会发现，async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。<br>async函数对 Generator 函数的改进，体现在以下四点。</p><p>（1）内置执行器。</p><p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。</p><pre><code>asyncReadFile();</code></pre><p>上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。</p><p>（2）更好的语义。</p><p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p><p>（3）更广的适用性。</p><p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p><p>（4）返回值是 Promise。</p><p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p><p>进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><h5 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h5><p>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><p>async 函数有多种使用形式。</p><pre><code>// 函数声明async function foo() {}// 函数表达式const foo = async function () {};// 对象的方法let obj = { async foo() {} };obj.foo().then(...)// Class 的方法class Storage {  constructor() {    this.cachePromise = caches.open(&apos;avatars&apos;);  }  async getAvatar(name) {    const cache = await this.cachePromise;    return cache.match(`/avatars/${name}.jpg`);  }}const storage = new Storage();storage.getAvatar(&apos;jake&apos;).then(…);// 箭头函数const foo = async () =&gt; {};</code></pre><h5 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h5><p>async函数的语法规则总体上比较简单，难点是错误处理机制。</p><p>返回 Promise 对象<br>async函数返回一个 Promise 对象。</p><p>async函数内部return语句返回的值，会成为then方法回调函数的参数。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;async 函数是什么？一句话，它就是 Generator 函数的语法糖。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const gen = function* () {
  const f1 = yield readFile(&amp;apos;/etc/fstab&amp;apos;);
  const f2 = yield readFile(&amp;apos;/etc/shells&amp;apos;);
  console.log(f1.toString());
  console.log(f2.toString());
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;写成async函数，就是下面这样。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const asyncReadFile = async function () {
  const f1 = await readFile(&amp;apos;/etc/fstab&amp;apos;);
  const f2 = await readFile(&amp;apos;/etc/shells&amp;apos;);
  console.log(f1.toString());
  console.log(f2.toString());
};
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Es6" scheme="https://algate.coding.me/categories/Es6/"/>
    
    
      <category term="async" scheme="https://algate.coding.me/tags/async/"/>
    
      <category term="await" scheme="https://algate.coding.me/tags/await/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Class 的基本语法</title>
    <link href="https://algate.coding.me/2018/06/07/ES6-Class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://algate.coding.me/2018/06/07/ES6-Class的基本语法/</id>
    <published>2018-06-07T10:01:30.000Z</published>
    <updated>2019-02-27T03:27:59.532Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p><pre><code>function Point(x, y) {  this.x = x;  this.y = y;}Point.prototype.toString = function () {  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;};var p = new Point(1, 2);</code></pre><a id="more"></a><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。</p><p>基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样。</p><pre><code>//定义类class Point {  constructor(x, y) {    this.x = x;    this.y = y;  }  toString() {    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;  }}</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function Point(x, y) {
  this.x = x;
  this.y = y;
}

Point.prototype.toString = function () {
  return &amp;apos;(&amp;apos; + this.x + &amp;apos;, &amp;apos; + this.y + &amp;apos;)&amp;apos;;
};

var p = new Point(1, 2);
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Es6" scheme="https://algate.coding.me/categories/Es6/"/>
    
    
      <category term="Class" scheme="https://algate.coding.me/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>Js - 判断对象还是数组</title>
    <link href="https://algate.coding.me/2018/06/07/Js-%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%95%B0%E7%BB%84/"/>
    <id>https://algate.coding.me/2018/06/07/Js-判断对象还是数组/</id>
    <published>2018-06-07T06:36:30.000Z</published>
    <updated>2019-02-27T03:27:59.583Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>1.对于Javascript 1.8.5（ECMAScript 5），变量名字.isArray( )可以实现这个目的</p><pre><code>var a=[];var b={};Array.isArray(a);//trueArray.isArray(b)//false</code></pre><a id="more"></a><p>2.如果你只是用typeof来检查该变量，不论是array还是object，都将返回‘objec’。 此问题的一个可行的答案是是检查该变量是不是object，</p><p>并且检查该变量是否有数字长度（当为空array时长度也可能为0,object的长度为undefined）。</p><pre><code>var a=[];var b={};typeof a === &apos;object&apos; &amp;&amp; !isNaN(a.length)//truetypeof b === &apos;object&apos; &amp;&amp; !isNaN(b.length)//false</code></pre><p>3.调用toString( )方法试着将该变量转化为代表其类型的string。</p><pre><code>var a=[];var b={};Object.prototype.toString.call(a)  === &apos;[object Array]&apos;//trueObject.prototype.toString.call(b)  === &apos;[object Array]&apos;//false</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;1.对于Javascript 1.8.5（ECMAScript 5），变量名字.isArray( )可以实现这个目的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var a=[];
var b={};
Array.isArray(a);//true
Array.isArray(b)//false
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="判断对象" scheme="https://algate.coding.me/tags/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Js - 代码规范</title>
    <link href="https://algate.coding.me/2018/06/04/Js-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://algate.coding.me/2018/06/04/Js-代码规范/</id>
    <published>2018-06-04T07:59:30.000Z</published>
    <updated>2019-02-27T03:27:59.582Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --><p>本文来自百度代码规范。值得借鉴。</p><h1 id="JavaScript编码规范"><a href="#JavaScript编码规范" class="headerlink" title="JavaScript编码规范"></a>JavaScript编码规范</h1><p><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></p><p><a href="#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a></p><p><a href="#21-%E6%96%87%E4%BB%B6">2.1 文件</a></p><p><a href="#22-%E7%BB%93%E6%9E%84">2.2 结构</a></p><p><a href="#221-%E7%BC%A9%E8%BF%9B">2.2.1 缩进</a></p><p><a href="#222-%E7%A9%BA%E6%A0%BC">2.2.2 空格</a></p><p><a href="#223-%E6%8D%A2%E8%A1%8C">2.2.3 换行</a></p><p><a href="#224-%E8%AF%AD%E5%8F%A5">2.2.4 语句</a><br><a id="more"></a></p><p><a href="#23-%E5%91%BD%E5%90%8D">2.3 命名</a></p><p><a href="#24-%E6%B3%A8%E9%87%8A">2.4 注释</a></p><p><a href="#241-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.1 单行注释</a></p><p><a href="#242-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.2 多行注释</a></p><p><a href="#243-%E6%96%87%E6%A1%A3%E5%8C%96%E6%B3%A8%E9%87%8A">2.4.3 文档化注释</a></p><p><a href="#244-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">2.4.4 类型定义</a></p><p><a href="#245-%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.5 文件注释</a></p><p><a href="#246-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E9%87%8A">2.4.6 命名空间注释</a></p><p><a href="#247-%E7%B1%BB%E6%B3%A8%E9%87%8A">2.4.7 类注释</a></p><p><a href="#248-%E5%87%BD%E6%95%B0/%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A">2.4.8 函数/方法注释</a></p><p><a href="#249-%E4%BA%8B%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.9 事件注释</a></p><p><a href="#2410-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A">2.4.10 常量注释</a></p><p><a href="#2411-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A">2.4.11 复杂类型注释</a></p><p><a href="#2412-amd-%E6%A8%A1%E5%9D%97%E6%B3%A8%E9%87%8A">2.4.12 AMD 模块注释</a></p><p><a href="#2413-%E7%BB%86%E8%8A%82%E6%B3%A8%E9%87%8A">2.4.13 细节注释</a></p><p><a href="#3-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">3 语言特性</a></p><p><a href="#31-%E5%8F%98%E9%87%8F">3.1 变量</a></p><p><a href="#32-%E6%9D%A1%E4%BB%B6">3.2 条件</a></p><p><a href="#33-%E5%BE%AA%E7%8E%AF">3.3 循环</a></p><p><a href="#34-%E7%B1%BB%E5%9E%8B">3.4 类型</a></p><p><a href="#341-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B">3.4.1 类型检测</a></p><p><a href="#342-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">3.4.2 类型转换</a></p><p><a href="#35-%E5%AD%97%E7%AC%A6%E4%B8%B2">3.5 字符串</a></p><p><a href="#36-%E5%AF%B9%E8%B1%A1">3.6 对象</a></p><p><a href="#37-%E6%95%B0%E7%BB%84">3.7 数组</a></p><p><a href="#38-%E5%87%BD%E6%95%B0">3.8 函数</a></p><p><a href="#381-%E5%87%BD%E6%95%B0%E9%95%BF%E5%BA%A6">3.8.1 函数长度</a></p><p><a href="#382-%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1">3.8.2 参数设计</a></p><p><a href="#383-%E9%97%AD%E5%8C%85">3.8.3 闭包</a></p><p><a href="#384-%E7%A9%BA%E5%87%BD%E6%95%B0">3.8.4 空函数</a></p><p><a href="#39-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">3.9 面向对象</a></p><p><a href="#310-%E5%8A%A8%E6%80%81%E7%89%B9%E6%80%A7">3.10 动态特性</a></p><p><a href="#3101-eval">3.10.1 eval</a></p><p><a href="#3102-%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">3.10.2 动态执行代码</a></p><p><a href="#3103-with">3.10.3 with</a></p><p><a href="#3104-delete">3.10.4 delete</a></p><p><a href="#3105-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">3.10.5 对象属性</a></p><p><a href="#4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83">4 浏览器环境</a></p><p><a href="#41-%E6%A8%A1%E5%9D%97%E5%8C%96">4.1 模块化</a></p><p><a href="#411-amd">4.1.1 AMD</a></p><p><a href="#412-define">4.1.2 define</a></p><p><a href="#413-require">4.1.3 require</a></p><p><a href="#42-dom">4.2 DOM</a></p><p><a href="#421-%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96">4.2.1 元素获取</a></p><p><a href="#422-%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96">4.2.2 样式获取</a></p><p><a href="#423-%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">4.2.3 样式设置</a></p><p><a href="#424-dom-%E6%93%8D%E4%BD%9C">4.2.4 DOM 操作</a></p><p><a href="#425-dom-%E4%BA%8B%E4%BB%B6">4.2.5 DOM 事件</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>JavaScript在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h3><h5 id="建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h5 id="建议-在文件结尾处，保留一个空行。"><a href="#建议-在文件结尾处，保留一个空行。" class="headerlink" title="[建议] 在文件结尾处，保留一个空行。"></a>[建议] 在文件结尾处，保留一个空行。</h5><h3 id="2-2-结构"><a href="#2-2-结构" class="headerlink" title="2.2 结构"></a>2.2 结构</h3><h4 id="2-2-1-缩进"><a href="#2-2-1-缩进" class="headerlink" title="2.2.1 缩进"></a>2.2.1 缩进</h4><h5 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id="强制-switch-下的-case-和-default-必须增加一个缩进层级。"><a href="#强制-switch-下的-case-和-default-必须增加一个缩进层级。" class="headerlink" title="[强制] switch 下的 case 和 default 必须增加一个缩进层级。"></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-空格"><a href="#2-2-2-空格" class="headerlink" title="2.2.2 空格"></a>2.2.2 空格</h4><h5 id="强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"><a href="#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。" class="headerlink" title="[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !arr.length;</span><br><span class="line">a++;</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure><h5 id="强制-用作代码块起始的左花括号-前必须有一个空格。"><a href="#强制-用作代码块起始的左花括号-前必须有一个空格。" class="headerlink" title="[强制] 用作代码块起始的左花括号 { 前必须有一个空格。"></a>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。"><a href="#强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。" class="headerlink" title="[强制] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。"></a>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h5 id="强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。"><a href="#强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。" class="headerlink" title="[强制] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。"></a>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c :<span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。"><a href="#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。" class="headerlink" title="[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。"></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName ();</span><br></pre></td></tr></table></figure><h5 id="强制-和-前不允许有空格。"><a href="#强制-和-前不允许有空格。" class="headerlink" title="[强制] , 和 ; 前不允许有空格。"></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">callFunc(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">callFunc(a , b) ;</span><br></pre></td></tr></table></figure><h5 id="强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。"><a href="#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。" class="headerlink" title="[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。"></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncream &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line">callFunc( param1, param2, param3 );</span><br><span class="line"></span><br><span class="line">save( <span class="keyword">this</span>.list[ <span class="keyword">this</span>.indexes[ i ] ] );</span><br><span class="line"></span><br><span class="line">needIncreament &amp;&amp; ( variable += increament );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( num &gt; list.length ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( len-- ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。"><a href="#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。" class="headerlink" title="[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。"></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p><p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [ ];</span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-行尾不得有多余的空格。"><a href="#强制-行尾不得有多余的空格。" class="headerlink" title="[强制] 行尾不得有多余的空格。"></a>[强制] 行尾不得有多余的空格。</h5><h4 id="2-2-3-换行"><a href="#2-2-3-换行" class="headerlink" title="2.2.3 换行"></a>2.2.3 换行</h4><h5 id="强制-每个独立语句结束后必须换行。"><a href="#强制-每个独立语句结束后必须换行。" class="headerlink" title="[强制] 每个独立语句结束后必须换行。"></a>[强制] 每个独立语句结束后必须换行。</h5><h5 id="强制-每行不得超过-120-个字符。"><a href="#强制-每行不得超过-120-个字符。" class="headerlink" title="[强制] 每行不得超过 120 个字符。"></a>[强制] 每行不得超过 <code>120</code> 个字符。</h5><p>解释：</p><p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p><h5 id="强制-运算符处换行时，运算符必须在新行的行首。"><a href="#强制-运算符处换行时，运算符必须在新行的行首。" class="headerlink" title="[强制] 运算符处换行时，运算符必须在新行的行首。"></a>[强制] 运算符处换行时，运算符必须在新行的行首。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3</span><br><span class="line">    + number4 + number5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">'admin'</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">'add-admin'</span>) ||</span><br><span class="line">    user.hasAuthority(<span class="string">'delete-admin'</span>)) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3 +</span><br><span class="line">    number4 + number5;</span><br></pre></td></tr></table></figure><h5 id="强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。"><a href="#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。" class="headerlink" title="[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 , 或 ; 前换行。"></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument</span><br><span class="line">    , anotherVeryLongArgument</span><br><span class="line">    , callback</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。"><a href="#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。" class="headerlink" title="[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element.style[property] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。"><a href="#建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。" class="headerlink" title="[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。"></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></span><br><span class="line"><span class="comment">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></span><br><span class="line"><span class="comment">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></span><br><span class="line"><span class="comment">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">''</span> <span class="comment">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span></span><br><span class="line">    + <span class="string">'&lt;article&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></span><br><span class="line">    + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span></span><br><span class="line"><span class="keyword">var</span> html = [</span><br><span class="line">    <span class="string">'&lt;article&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/article&gt;'</span></span><br><span class="line">];</span><br><span class="line">html = html.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></span><br><span class="line"><span class="comment">// 所有参数必须增加一个缩进。</span></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以按逻辑对参数进行组合。</span></span><br><span class="line"><span class="comment">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span></span><br><span class="line">baidu.format(</span><br><span class="line">    dateFormatTemplate,</span><br><span class="line">    year, month, date, hour, minute, second</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></span><br><span class="line"><span class="comment">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span></span><br><span class="line">setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">200</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">order.data.read(</span><br><span class="line">    <span class="string">'id='</span> + me.model.id,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        me.attchToModel(data.result);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">300</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用较长时采用缩进进行调整。</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">    .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></span><br><span class="line"><span class="keyword">var</span> result = thisIsAVeryVeryLongCondition</span><br><span class="line">    ? resultA : resultB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = condition</span><br><span class="line">    ? thisIsAVeryVeryLongResult</span><br><span class="line">    : resultB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组和对象初始化的混用，严格按照每个对象的 &#123; 和结束 &#125; 在独立一行的风格书写。</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。"><a href="#建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。" class="headerlink" title="[建议] 对于 if...else...、try...catch...finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。"></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-语句"><a href="#2-2-4-语句" class="headerlink" title="2.2.4 语句"></a>2.2.4 语句</h4><h5 id="强制-不得省略语句结束的分号。"><a href="#强制-不得省略语句结束的分号。" class="headerlink" title="[强制] 不得省略语句结束的分号。"></a>[强制] 不得省略语句结束的分号。</h5><h5 id="强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。"><a href="#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。" class="headerlink" title="[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。"></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    callFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    callFunc();</span><br></pre></td></tr></table></figure><h5 id="强制-函数定义结束不允许添加分号。"><a href="#强制-函数定义结束不允许添加分号。" class="headerlink" title="[强制] 函数定义结束不允许添加分号。"></a>[强制] 函数定义结束不允许添加分号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。"><a href="#强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。" class="headerlink" title="[强制] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 (。"></a>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5><p>解释：</p><p>IIFE = Immediately-Invoked Function Expression.</p><p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Code</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-命名"><a href="#2-3-命名" class="headerlink" title="2.3 命名"></a>2.3 命名</h3><h5 id="强制-变量-使用-Camel命名法。"><a href="#强制-变量-使用-Camel命名法。" class="headerlink" title="[强制] 变量 使用 Camel命名法。"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-函数-使用-Camel命名法。"><a href="#强制-函数-使用-Camel命名法。" class="headerlink" title="[强制] 函数 使用 Camel命名法。"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-函数的-参数-使用-Camel命名法。"><a href="#强制-函数的-参数-使用-Camel命名法。" class="headerlink" title="[强制] 函数的 参数 使用 Camel命名法。"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类-使用-Pascal命名法。"><a href="#强制-类-使用-Pascal命名法。" class="headerlink" title="[强制] 类 使用 Pascal命名法。"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类的-方法-属性-使用-Camel命名法。"><a href="#强制-类的-方法-属性-使用-Camel命名法。" class="headerlink" title="[强制] 类的 方法 / 属性 使用 Camel命名法。"></a>[强制] 类的 <code>方法 / 属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">    READING: <span class="number">1</span>,</span><br><span class="line">    READED: <span class="number">2</span>,</span><br><span class="line">    APPLIED: <span class="number">3</span>,</span><br><span class="line">    READY: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-命名空间-使用-Camel命名法。"><a href="#强制-命名空间-使用-Camel命名法。" class="headerlink" title="[强制] 命名空间 使用 Camel命名法。"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"><a href="#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。" class="headerlink" title="[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure><h5 id="强制-类名-使用-名词。"><a href="#强制-类名-使用-名词。" class="headerlink" title="[强制] 类名 使用 名词。"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-函数名-使用-动宾短语。"><a href="#建议-函数名-使用-动宾短语。" class="headerlink" title="[建议] 函数名 使用 动宾短语。"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-boolean-类型的变量使用-is-或-has-开头。"><a href="#建议-boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="[建议] boolean 类型的变量使用 is 或 has 开头。"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-Promise对象-用-动宾短语的进行时-表达。"><a href="#建议-Promise对象-用-动宾短语的进行时-表达。" class="headerlink" title="[建议] Promise对象 用 动宾短语的进行时 表达。"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure><h3 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h3><h4 id="2-4-1-单行注释"><a href="#2-4-1-单行注释" class="headerlink" title="2.4.1 单行注释"></a>2.4.1 单行注释</h4><h5 id="强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。"><a href="#强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。" class="headerlink" title="[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。"></a>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5><h4 id="2-4-2-多行注释"><a href="#2-4-2-多行注释" class="headerlink" title="2.4.2 多行注释"></a>2.4.2 多行注释</h4><h5 id="建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。"><a href="#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。" class="headerlink" title="[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id="2-4-3-文档化注释"><a href="#2-4-3-文档化注释" class="headerlink" title="2.4.3 文档化注释"></a>2.4.3 文档化注释</h4><h5 id="强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。"><a href="#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。" class="headerlink" title="[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。"></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p><ol><li>文件</li><li>namespace</li><li>类</li><li>函数或方法</li><li>类属性</li><li>事件</li><li>全局变量</li><li>常量</li><li>AMD 模块</li></ol><h5 id="强制-文档注释前必须空一行。"><a href="#强制-文档注释前必须空一行。" class="headerlink" title="[强制] 文档注释前必须空一行。"></a>[强制] 文档注释前必须空一行。</h5><h5 id="建议-自文档化的文档说明-what，而不是-how。"><a href="#建议-自文档化的文档说明-what，而不是-how。" class="headerlink" title="[建议] 自文档化的文档说明 what，而不是 how。"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id="2-4-4-类型定义"><a href="#2-4-4-类型定义" class="headerlink" title="2.4.4 类型定义"></a>2.4.4 类型定义</h4><h5 id="强制-类型定义都是以-开始-以-结束。"><a href="#强制-类型定义都是以-开始-以-结束。" class="headerlink" title="[强制] 类型定义都是以{开始, 以}结束。"></a>[强制] 类型定义都是以<code>{</code>开始, 以<code>}</code>结束。</h5><p>解释：</p><p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p><p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p><h5 id="强制-对于基本类型-string-number-boolean-，首字母必须小写。"><a href="#强制-对于基本类型-string-number-boolean-，首字母必须小写。" class="headerlink" title="[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。"></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table><thead><tr><th>类型定义</th><th>语法示例</th><th>解释</th></tr></thead><tbody><tr><td>String</td><td>{string}</td><td>–</td></tr><tr><td>Number</td><td>{number}</td><td>–</td></tr><tr><td>Boolean</td><td>{boolean}</td><td>–</td></tr><tr><td>Object</td><td>{Object}</td><td>–</td></tr><tr><td>Function</td><td>{Function}</td><td>–</td></tr><tr><td>RegExp</td><td>{RegExp}</td><td>–</td></tr><tr><td>Array</td><td>{Array}</td><td>–</td></tr><tr><td>Date</td><td>{Date}</td><td>–</td></tr><tr><td>单一类型集合</td><td>{Array.&lt;string&gt;}</td><td>string 类型的数组</td></tr><tr><td>多类型</td><td>{(number｜boolean)}</td><td>可能是 number 类型, 也可能是 boolean 类型</td></tr><tr><td>允许为null</td><td>{?number}</td><td>可能是 number, 也可能是 null</td></tr><tr><td>不允许为null</td><td>{!Object}</td><td>Object 类型, 但不是 null</td></tr><tr><td>Function类型</td><td>{function(number, boolean)}</td><td>函数, 形参类型</td></tr><tr><td>Function带返回值</td><td>{function(number, boolean):string}</td><td>函数, 形参, 返回值类型</td></tr><tr><td>参数可选</td><td>@param {string=} name</td><td>可选参数, =为类型后缀</td></tr><tr><td>可变参数</td><td>@param {…number} args</td><td>变长参数, …为类型前缀</td></tr><tr><td>任意类型</td><td>{*}</td><td>任意类型</td></tr><tr><td>可选任意类型</td><td>@param {*=} name</td><td>可选参数，类型不限</td></tr><tr><td>可变任意类型</td><td>@param {…*} args</td><td>变长参数，类型不限</td></tr></tbody></table><h4 id="2-4-5-文件注释"><a href="#2-4-5-文件注释" class="headerlink" title="2.4.5 文件注释"></a>2.4.5 文件注释</h4><h5 id="强制-文件顶部必须包含文件注释，用-file-标识文件说明。"><a href="#强制-文件顶部必须包含文件注释，用-file-标识文件说明。" class="headerlink" title="[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。"></a>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="建议-文件注释中可以用-author-标识开发者信息。"><a href="#建议-文件注释中可以用-author-标识开发者信息。" class="headerlink" title="[建议] 文件注释中可以用 @author 标识开发者信息。"></a>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5><p>解释：</p><p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p><p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p><p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p><p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p><p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> * @author author-name(mail-name@domain.com)</span></span><br><span class="line"><span class="comment"> *         author-name2(mail-name2@domain.com)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="2-4-6-命名空间注释"><a href="#2-4-6-命名空间注释" class="headerlink" title="2.4.6 命名空间注释"></a>2.4.6 命名空间注释</h4><h5 id="建议-命名空间使用-namespace-标识。"><a href="#建议-命名空间使用-namespace-标识。" class="headerlink" title="[建议] 命名空间使用 @namespace 标识。"></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> util = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-7-类注释"><a href="#2-4-7-类注释" class="headerlink" title="2.4.7 类注释"></a>2.4.7 类注释</h4><h5 id="建议-使用-class-标记类或构造函数。"><a href="#建议-使用-class-标记类或构造函数。" class="headerlink" title="[建议] 使用 @class 标记类或构造函数。"></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5><p>解释：</p><p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-extends-标记类的继承信息。"><a href="#建议-使用-extends-标记类的继承信息。" class="headerlink" title="[建议] 使用 @extends 标记类的继承信息。"></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br></pre></td></tr></table></figure><h5 id="强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。"><a href="#强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。" class="headerlink" title="[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。"></a>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5><p>解释：</p><p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.extend(</span><br><span class="line">    Fronteer.prototype,</span><br><span class="line">    <span class="comment">/** @lends Fronteer.prototype */</span>&#123;</span><br><span class="line">        _getLevel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。"><a href="#强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。" class="headerlink" title="[强制] 类的属性或方法等成员信息使用 @public / @protected / @private 中的任意一个，指明可访问性。"></a>[强制] 类的属性或方法等成员信息使用 <code>@public</code> / <code>@protected</code> / <code>@private</code> 中的任意一个，指明可访问性。</h5><p>解释：</p><p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Fronteer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性描述</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._level = <span class="string">'T12'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Fronteer.prototype._getLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-8-函数-方法注释"><a href="#2-4-8-函数-方法注释" class="headerlink" title="2.4.8 函数/方法注释"></a>2.4.8 函数/方法注释</h4><h5 id="强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"><a href="#强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。" class="headerlink" title="[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"></a>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5><h5 id="强制-参数和返回值注释必须包含类型信息和说明。"><a href="#强制-参数和返回值注释必须包含类型信息和说明。" class="headerlink" title="[强制] 参数和返回值注释必须包含类型信息和说明。"></a>[强制] 参数和返回值注释必须包含类型信息和说明。</h5><h5 id="建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。"><a href="#建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。" class="headerlink" title="[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。"></a>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p1 参数1的说明</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p2 参数2的说明，比较长</span></span><br><span class="line"><span class="comment"> *     那就换行了.</span></span><br><span class="line"><span class="comment"> * @param &#123;number=&#125; p3 参数3的说明（可选）</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, p3</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        p1: p1,</span><br><span class="line">        p2: p2,</span><br><span class="line">        p3: p3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-对-Object-中各项的描述，-必须使用-param-标识。"><a href="#强制-对-Object-中各项的描述，-必须使用-param-标识。" class="headerlink" title="[强制] 对 Object 中各项的描述， 必须使用 @param 标识。"></a>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; option 参数描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; option.url option项描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string=&#125; option.method option项描述，可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。"><a href="#建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。" class="headerlink" title="[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param、@return，仅用 @override 标识，否则仍应作完整注释。"></a>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5><p>解释：</p><p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p><h4 id="2-4-9-事件注释"><a href="#2-4-9-事件注释" class="headerlink" title="2.4.9 事件注释"></a>2.4.9 事件注释</h4><h5 id="强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。"><a href="#强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。" class="headerlink" title="[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。"></a>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 值变更时触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @event</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onchange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。"><a href="#强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。" class="headerlink" title="[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。"></a>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5><h5 id="建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。"><a href="#建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。" class="headerlink" title="[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。"></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-10-常量注释"><a href="#2-4-10-常量注释" class="headerlink" title="2.4.10 常量注释"></a>2.4.10 常量注释</h4><h5 id="强制-常量必须使用-const-标记，并包含说明和类型信息。"><a href="#强制-常量必须使用-const-标记，并包含说明和类型信息。" class="headerlink" title="[强制] 常量必须使用 @const 标记，并包含说明和类型信息。"></a>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @const</span></span><br><span class="line"><span class="comment"> * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> REQUEST_URL = <span class="string">'myurl.do'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-11-复杂类型注释"><a href="#2-4-11-复杂类型注释" class="headerlink" title="2.4.11 复杂类型注释"></a>2.4.11 复杂类型注释</h4><h5 id="建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。"><a href="#建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。" class="headerlink" title="[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。"></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @typedef &#123;Object&#125; namespaceA~Server</span></span><br><span class="line"><span class="comment"> * @property &#123;string&#125; host 主机</span></span><br><span class="line"><span class="comment"> * @property &#123;number&#125; port 端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> servers = [</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.4'</span>,</span><br><span class="line">        port: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.5'</span>,</span><br><span class="line">        port: <span class="number">8081</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="2-4-12-AMD-模块注释"><a href="#2-4-12-AMD-模块注释" class="headerlink" title="2.4.12 AMD 模块注释"></a>2.4.12 AMD 模块注释</h4><h5 id="强制-AMD-模块使用-module-或-exports-标识。"><a href="#强制-AMD-模块使用-module-或-exports-标识。" class="headerlink" title="[强制] AMD 模块使用 @module 或 @exports 标识。"></a>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5><p>解释：</p><p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * foo description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @exports Foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> foo = &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * baz description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return &#123;boolean&#125; return description</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        foo.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也可以在 exports 变量前使用 @module 标识：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * module description.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @module foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果直接使用 factory 的 exports 参数，还可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module description.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @module</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。"><a href="#强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。" class="headerlink" title="[强制] 对于已使用 @module 标识为 AMD模块 的引用，在 namepaths 中必须增加 module: 作前缀。"></a>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5><p>解释：</p><p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires module:Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event module:Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对于类定义的模块，可以使用-alias-标识构建函数。"><a href="#建议-对于类定义的模块，可以使用-alias-标识构建函数。" class="headerlink" title="[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。"></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A module representing a jacket.</span></span><br><span class="line"><span class="comment"> * @module jacket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @class</span></span><br><span class="line"><span class="comment">         * @alias module:jacket</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> Jacket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jacket;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-多模块定义时，可以使用-exports-标识各个模块。"><a href="#建议-多模块定义时，可以使用-exports-标识各个模块。" class="headerlink" title="[建议] 多模块定义时，可以使用 @exports 标识各个模块。"></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one module</span></span><br><span class="line">define(<span class="string">'html/utils'</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Utility functions to ease working with DOM elements.</span></span><br><span class="line"><span class="comment">     * @exports html/utils</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// another module</span></span><br><span class="line">define(<span class="string">'tag'</span>,</span><br><span class="line">    <span class="comment">/** @exports tag */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-对于-exports-为-Object-的模块，可以使用-namespace标识。"><a href="#建议-对于-exports-为-Object-的模块，可以使用-namespace标识。" class="headerlink" title="[建议] 对于 exports 为 Object 的模块，可以使用@namespace标识。"></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5><p>解释：</p><p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p><h5 id="建议-对于-exports-为类名的模块，使用-class-和-exports-标识。"><a href="#建议-对于-exports-为类名的模块，使用-class-和-exports-标识。" class="headerlink" title="[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。"></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></span><br><span class="line"><span class="comment">// 另外需要注意类名需要使用 var 定义的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bar description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see foo</span></span><br><span class="line"><span class="comment"> * @exports  Bar</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * baz description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return &#123;(string|Array)&#125; return description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Bar.prototype.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-13-细节注释"><a href="#2-4-13-细节注释" class="headerlink" title="2.4.13 细节注释"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p><h4 id="建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"><a href="#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。" class="headerlink" title="[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, opt_p3</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></span><br><span class="line">    <span class="comment">// 说明太长需要换行</span></span><br><span class="line">    <span class="keyword">for</span> (...) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："><a href="#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：" class="headerlink" title="[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p><ol><li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li><li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li><li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li><li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li></ol><h2 id="3-语言特性"><a href="#3-语言特性" class="headerlink" title="3 语言特性"></a>3 语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><h5 id="强制-变量在使用前必须通过-var-定义。"><a href="#强制-变量在使用前必须通过-var-定义。" class="headerlink" title="[强制] 变量在使用前必须通过 var 定义。"></a>[强制] 变量在使用前必须通过 <code>var</code> 定义。</h5><p>解释：</p><p>不通过 var 定义变量将导致变量污染全局环境。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'MyName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">name = <span class="string">'MyName'</span>;</span><br></pre></td></tr></table></figure><h5 id="强制-每个-var-只能声明一个变量。"><a href="#强制-每个-var-只能声明一个变量。" class="headerlink" title="[强制] 每个 var 只能声明一个变量。"></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p><p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [];</span><br><span class="line"><span class="keyword">var</span> missModules = [];</span><br><span class="line"><span class="keyword">var</span> visited = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [],</span><br><span class="line">    missModules = [],</span><br><span class="line">    visited = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"><a href="#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。" class="headerlink" title="[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释：</p><p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-条件"><a href="#3-2-条件" class="headerlink" title="3.2 条件"></a>3.2 条件</h3><h5 id="强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。"><a href="#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。" class="headerlink" title="[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。"></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。</h5><p>解释：</p><p>使用 === 可以避免等于判断中隐式的类型转换。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-尽可能使用简洁的表达式。"><a href="#建议-尽可能使用简洁的表达式。" class="headerlink" title="[建议] 尽可能使用简洁的表达式。"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔不成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!notTrue) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-按执行频率排列分支的顺序。"><a href="#建议-按执行频率排列分支的顺序。" class="headerlink" title="[建议] 按执行频率排列分支的顺序。"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p><p>按执行频率排列分支的顺序好处是：</p><ol><li>阅读的人容易找到最常见的情况，增加可读性。</li><li>提高执行效率。</li></ol><h5 id="建议-对于相同变量或表达式的多值条件，用-switch-代替-if。"><a href="#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。" class="headerlink" title="[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'number'</span> || type === <span class="string">'boolean'</span> || type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。"><a href="#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。" class="headerlink" title="[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h3><h5 id="建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。"><a href="#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。" class="headerlink" title="[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p><p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, clicker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对循环内多次使用的不变值，在循环外用变量缓存。"><a href="#建议-对循环内多次使用的不变值，在循环外用变量缓存。" class="headerlink" title="[建议] 对循环内多次使用的不变值，在循环外用变量缓存。"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = width;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行遍历时，缓存-length。"><a href="#建议-对有序集合进行遍历时，缓存-length。" class="headerlink" title="[建议] 对有序集合进行遍历时，缓存 length。"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p><p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。"><a href="#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。" class="headerlink" title="[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p><p>逆序遍历可以节省变量，代码比较优化。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = elements.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[len];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-类型"><a href="#3-4-类型" class="headerlink" title="3.4 类型"></a>3.4 类型</h3><h4 id="3-4-1-类型检测"><a href="#3-4-1-类型检测" class="headerlink" title="3.4.1 类型检测"></a>3.4.1 类型检测</h4><h5 id="建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。"><a href="#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" class="headerlink" title="[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-类型转换"><a href="#3-4-2-类型转换" class="headerlink" title="3.4.2 类型转换"></a>3.4.2 类型转换</h4><h5 id="建议-转换成-string-时，使用-39-39-。"><a href="#建议-转换成-string-时，使用-39-39-。" class="headerlink" title="[建议] 转换成 string 时，使用 + &#39;&#39;。"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">num + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</span><br><span class="line">num.toString();</span><br><span class="line"><span class="built_in">String</span>(num);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-number-时，通常使用-。"><a href="#建议-转换成-number-时，通常使用-。" class="headerlink" title="[建议] 转换成 number 时，通常使用 +。"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">+str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。"><a href="#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。" class="headerlink" title="[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="string">'200px'</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h5 id="强制-使用-parseInt-时，必须指定进制。"><a href="#强制-使用-parseInt-时，必须指定进制。" class="headerlink" title="[强制] 使用 parseInt 时，必须指定进制。"></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">parseInt</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-boolean-时，使用-。"><a href="#建议-转换成-boolean-时，使用-。" class="headerlink" title="[建议] 转换成 boolean 时，使用 !!。"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line">!!num;</span><br></pre></td></tr></table></figure><h5 id="建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。"><a href="#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。" class="headerlink" title="[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor / Math.round / Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><h5 id="强制-字符串开头和结束使用单引号-39-。"><a href="#强制-字符串开头和结束使用单引号-39-。" class="headerlink" title="[强制] 字符串开头和结束使用单引号 &#39;。"></a>[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p><ol><li>输入单引号不需要按住 shift，方便输入。</li><li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'我是一个字符串'</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-数组-或-拼接字符串。"><a href="#建议-使用-数组-或-拼接字符串。" class="headerlink" title="[建议] 使用 数组 或 + 拼接字符串。"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p><ol><li>使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。</li><li>在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。</li><li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></span><br><span class="line">    <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/ul&gt;'</span></span><br><span class="line">].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></span><br><span class="line">    + <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。"><a href="#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。" class="headerlink" title="[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p><p>使用模板引擎有如下好处：</p><ol><li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li><li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li></ol><ul><li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li><li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li><li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li><li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li><li>hogon: 体积小，在现代浏览器下性能高。</li><li>nunjucks: 体积较大，性能一般，模板复用性高。</li></ul><h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><h5 id="强制-使用对象字面量-创建新-Object。"><a href="#强制-使用对象字面量-创建新-Object。" class="headerlink" title="[强制] 使用对象字面量 {} 创建新 Object。"></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h5 id="强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。"><a href="#强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。" class="headerlink" title="[强制] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，则所有 属性 不得添加引号。"></a>[强制] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，则所有 <code>属性</code> 不得添加引号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。"><a href="#强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。" class="headerlink" title="[强制] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 必须添加 &#39;。"></a>[强制] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 必须添加 <code>&#39;</code>。</h5><p>解释：</p><p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'someone'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-不允许修改和扩展任何原生对象和宿主对象的原型。"><a href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型。" class="headerlink" title="[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。"></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下行为绝对禁止</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-属性访问时，尽量使用-。"><a href="#建议-属性访问时，尽量使用-。" class="headerlink" title="[建议] 属性访问时，尽量使用 .。"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p><p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p><p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info.age;</span><br><span class="line">info[<span class="string">'more-info'</span>];</span><br></pre></td></tr></table></figure><h5 id="建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。"><a href="#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。" class="headerlink" title="[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</span><br><span class="line">        newInfo[key] = info[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-数组"><a href="#3-7-数组" class="headerlink" title="3.7 数组"></a>3.7 数组</h3><h5 id="强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。"><a href="#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。" class="headerlink" title="[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。"></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><h5 id="强制-遍历数组不使用-for-in。"><a href="#强制-遍历数组不使用-for-in。" class="headerlink" title="[强制] 遍历数组不使用 for in。"></a>[强制] 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p><p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.other = <span class="string">'other things'</span>; <span class="comment">// 这里仅作演示, 实际中应使用Object类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。"><a href="#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。" class="headerlink" title="[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p><p>自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：</p><ol><li>需要稳定的排序算法，达到严格一致的排序结果。</li><li>数据特点鲜明，适合使用桶排。</li></ol><h5 id="建议-清空数组使用-length-0。"><a href="#建议-清空数组使用-length-0。" class="headerlink" title="[建议] 清空数组使用 .length = 0。"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id="3-8-函数"><a href="#3-8-函数" class="headerlink" title="3.8 函数"></a>3.8 函数</h3><h4 id="3-8-1-函数长度"><a href="#3-8-1-函数长度" class="headerlink" title="3.8.1 函数长度"></a>3.8.1 函数长度</h4><h5 id="建议-一个函数的长度控制在-50-行以内。"><a href="#建议-一个函数的长度控制在-50-行以内。" class="headerlink" title="[建议] 一个函数的长度控制在 50 行以内。"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p><p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p><p>特定算法等不可分割的逻辑允许例外。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">        warning.innerText = <span class="string">'Please enter it'</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        warning.innerText = <span class="string">''</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    syncXStateToView();</span><br><span class="line">    checkAAvailability();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">        displayWarningForAMissing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        clearWarnignForA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-2-参数设计"><a href="#3-8-2-参数设计" class="headerlink" title="3.8.2 参数设计"></a>3.8.2 参数设计</h4><h5 id="建议-一个函数的参数控制在-6-个以内。"><a href="#建议-一个函数的参数控制在-6-个以内。" class="headerlink" title="[建议] 一个函数的参数控制在 6 个以内。"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p><p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。</p><p>某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p><h5 id="建议-通过-options-参数传递非数据输入型参数。"><a href="#建议-通过-options-参数传递非数据输入型参数。" class="headerlink" title="[建议] 通过 options 参数传递非数据输入型参数。"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p><p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。</p><p>如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line">    <span class="keyword">if</span> (removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以转换为下面的签名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; options 相关的逻辑配置</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line">    <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式有几个显著的优势：</p><ul><li>boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li><li>当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。</li><li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li></ul><h4 id="3-8-3-闭包"><a href="#3-8-3-闭包" class="headerlink" title="3.8.3 闭包"></a>3.8.3 闭包</h4><h5 id="建议-在适当的时候将闭包内大对象置为-null。"><a href="#建议-在适当的时候将闭包内大对象置为-null。" class="headerlink" title="[建议] 在适当的时候将闭包内大对象置为 null。"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p><p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p><p>闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。</p><p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p><ul><li>嵌套的函数中是否有使用该变量。</li><li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li><li>是否使用了 with 表达式。</li></ul><p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p><p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p><ol><li>如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol><li>如果是 V8 引擎，则退出全过程。</li><li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li></ol></li><li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol><li>如果 FunctionBody 中含有 <strong>直接调用eval</strong>，则退出全过程。</li><li>否则得到所有的 Identifier。</li><li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li><li>对 binding 添加 notSwap 属性，其值为 true。</li></ol></li><li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：<ol><li>如果是V8引擎，删除该绑定。</li><li>如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li></ol></li></ol><p>对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p><p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p><h5 id="建议-使用-IIFE-避免-Lift-效应。"><a href="#建议-使用-IIFE-避免-Lift-效应。" class="headerlink" title="[建议] 使用 IIFE 避免 Lift 效应。"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p><p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p><p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意有一层额外的闭包</span></span><br><span class="line">    tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-4-空函数"><a href="#3-8-4-空函数" class="headerlink" title="3.8.4 空函数"></a>3.8.4 空函数</h4><h5 id="建议-空函数不使用-new-Function-的形式。"><a href="#建议-空函数不使用-new-Function-的形式。" class="headerlink" title="[建议] 空函数不使用 new Function() 的形式。"></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"><a href="#建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。" class="headerlink" title="[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EMPTY_FUNCTION = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</span><br></pre></td></tr></table></figure><h3 id="3-9-面向对象"><a href="#3-9-面向对象" class="headerlink" title="3.9 面向对象"></a>3.9 面向对象</h3><h5 id="强制-类的继承方案，实现时需要修正-constructor。"><a href="#强制-类的继承方案，实现时需要修正-constructor。" class="headerlink" title="[强制] 类的继承方案，实现时需要修正 constructor。"></a>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5><p>解释：</p><p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建类之间的继承关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; subClass 子类函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; superClass 父类函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">    F.prototype = superClass.prototype;</span><br><span class="line">    subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-声明类时，保证-constructor-的正确性。"><a href="#建议-声明类时，保证-constructor-的正确性。" class="headerlink" title="[建议] 声明类时，保证 constructor 的正确性。"></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接prototype等于对象时，需要修正constructor</span></span><br><span class="line">Animal.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Animal,</span><br><span class="line"></span><br><span class="line">    jump: function () &#123;</span><br><span class="line">        alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式扩展prototype则无需理会constructor</span></span><br><span class="line">Animal.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-属性在构造函数中声明，方法在原型中声明。"><a href="#建议-属性在构造函数中声明，方法在原型中声明。" class="headerlink" title="[建议] 属性在构造函数中声明，方法在原型中声明。"></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5><p>解释：</p><p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-自定义事件的-事件名-必须全小写。"><a href="#强制-自定义事件的-事件名-必须全小写。" class="headerlink" title="[强制] 自定义事件的 事件名 必须全小写。"></a>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5><p>解释：</p><p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p><h5 id="强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。"><a href="#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。" class="headerlink" title="[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。"></a>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5><p>解释：</p><p>一个事件对象的好处有：</p><ol><li>顺序无关，避免事件监听者需要记忆参数顺序。</li><li>每个事件信息都可以根据需要提供或者不提供，更自由。</li><li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li></ol><h5 id="建议-设计自定义事件时，应考虑禁止默认行为。"><a href="#建议-设计自定义事件时，应考虑禁止默认行为。" class="headerlink" title="[建议] 设计自定义事件时，应考虑禁止默认行为。"></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5><p>解释：</p><p>常见禁止默认行为的方式有两种：</p><ol><li>事件监听函数中 return false。</li><li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li></ol><h3 id="3-10-动态特性"><a href="#3-10-动态特性" class="headerlink" title="3.10 动态特性"></a>3.10 动态特性</h3><h4 id="3-10-1-eval"><a href="#3-10-1-eval" class="headerlink" title="3.10.1 eval"></a>3.10.1 eval</h4><h5 id="强制-避免使用直接-eval-函数。"><a href="#强制-避免使用直接-eval-函数。" class="headerlink" title="[强制] 避免使用直接 eval 函数。"></a>[强制] 避免使用直接 <code>eval</code> 函数。</h5><p>解释：</p><p>直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。</p><p>如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p><h5 id="建议-尽量避免使用-eval-函数。"><a href="#建议-尽量避免使用-eval-函数。" class="headerlink" title="[建议] 尽量避免使用 eval 函数。"></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5><h4 id="3-10-2-动态执行代码"><a href="#3-10-2-动态执行代码" class="headerlink" title="3.10.2 动态执行代码"></a>3.10.2 动态执行代码</h4><h5 id="建议-使用-new-Function-执行动态代码。"><a href="#建议-使用-new-Function-执行动态代码。" class="headerlink" title="[建议] 使用 new Function 执行动态代码。"></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5><p>解释：</p><p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'return x + y;'</span>);</span><br><span class="line"><span class="keyword">var</span> result = handler($(<span class="string">'#x'</span>).val(), $(<span class="string">'#y'</span>).val());</span><br></pre></td></tr></table></figure><h4 id="3-10-3-with"><a href="#3-10-3-with" class="headerlink" title="3.10.3 with"></a>3.10.3 with</h4><h5 id="建议-尽量不要使用-with。"><a href="#建议-尽量不要使用-with。" class="headerlink" title="[建议] 尽量不要使用 with。"></a>[建议] 尽量不要使用 <code>with</code>。</h5><p>解释：</p><p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。</p><h4 id="3-10-4-delete"><a href="#3-10-4-delete" class="headerlink" title="3.10.4 delete"></a>3.10.4 delete</h4><h5 id="建议-减少-delete-的使用。"><a href="#建议-减少-delete-的使用。" class="headerlink" title="[建议] 减少 delete 的使用。"></a>[建议] 减少 <code>delete</code> 的使用。</h5><p>解释：</p><p>如果没有特别的需求，减少或避免使用<code>delete</code>。<code>delete</code>的使用会破坏部分 JavaScript 引擎的性能优化。</p><h5 id="建议-处理-delete-可能产生的异常。"><a href="#建议-处理-delete-可能产生的异常。" class="headerlink" title="[建议] 处理 delete 可能产生的异常。"></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5><p>解释：</p><p>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。</p><p>在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> o.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (deleteError) &#123;</span><br><span class="line">    o.x = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-10-5-对象属性"><a href="#3-10-5-对象属性" class="headerlink" title="3.10.5 对象属性"></a>3.10.5 对象属性</h4><h5 id="建议-避免修改外部传入的对象。"><a href="#建议-避免修改外部传入的对象。" class="headerlink" title="[建议] 避免修改外部传入的对象。"></a>[建议] 避免修改外部传入的对象。</h5><p>解释：</p><p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p><p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p><p>下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node.selected = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">    <span class="keyword">this</span>.selectedNodeIndex = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="keyword">this</span>.selectedNodeIndex[id] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p><h5 id="建议-具备强类型的设计。"><a href="#建议-具备强类型的设计。" class="headerlink" title="[建议] 具备强类型的设计。"></a>[建议] 具备强类型的设计。</h5><p>解释：</p><ul><li>如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。</li><li>从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li></ul><h2 id="4-浏览器环境"><a href="#4-浏览器环境" class="headerlink" title="4 浏览器环境"></a>4 浏览器环境</h2><h3 id="4-1-模块化"><a href="#4-1-模块化" class="headerlink" title="4.1 模块化"></a>4.1 模块化</h3><h4 id="4-1-1-AMD"><a href="#4-1-1-AMD" class="headerlink" title="4.1.1 AMD"></a>4.1.1 AMD</h4><h5 id="强制-使用-AMD-作为模块定义。"><a href="#强制-使用-AMD-作为模块定义。" class="headerlink" title="[强制] 使用 AMD 作为模块定义。"></a>[强制] 使用 <code>AMD</code> 作为模块定义。</h5><p>解释：</p><p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p><p>目前，比较成熟的 AMD Loader 有：</p><ul><li>官方实现的 <a href="http://requirejs.org/" target="_blank" rel="noopener">requirejs</a></li><li>百度自己实现的 <a href="https://github.com/ecomfe/esl" target="_blank" rel="noopener">esl</a></li></ul><h5 id="强制-模块-id-必须符合标准。"><a href="#强制-模块-id-必须符合标准。" class="headerlink" title="[强制] 模块 id 必须符合标准。"></a>[强制] 模块 <code>id</code> 必须符合标准。</h5><p>解释：</p><p>模块 id 必须符合以下约束条件：</p><ol><li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li><li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li><li>不应该有 .js 后缀。</li><li>跟文件的路径保持一致。</li></ol><h4 id="4-1-2-define"><a href="#4-1-2-define" class="headerlink" title="4.1.2 define"></a>4.1.2 define</h4><h5 id="建议-定义模块时不要指明-id-和-dependencies。"><a href="#建议-定义模块时不要指明-id-和-dependencies。" class="headerlink" title="[建议] 定义模块时不要指明 id 和 dependencies。"></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5><p>解释：</p><p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p><p>所以，推荐使用 define(factory) 的形式进行模块定义。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-使用-return-来返回模块定义。"><a href="#建议-使用-return-来返回模块定义。" class="headerlink" title="[建议] 使用 return 来返回模块定义。"></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5><p>解释：</p><p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4-1-3-require"><a href="#4-1-3-require" class="headerlink" title="4.1.3 require"></a>4.1.3 require</h4><h5 id="强制-全局运行环境中，require-必须以-async-require-形式调用。"><a href="#强制-全局运行环境中，require-必须以-async-require-形式调用。" class="headerlink" title="[强制] 全局运行环境中，require 必须以 async require 形式调用。"></a>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5><p>解释：</p><p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h5 id="强制-模块定义中只允许使用-local-require，不允许使用-global-require。"><a href="#强制-模块定义中只允许使用-local-require，不允许使用-global-require。" class="headerlink" title="[强制] 模块定义中只允许使用 local require，不允许使用 global require。"></a>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5><p>解释：</p><ol><li>在模块定义中使用 global require，对封装性是一种破坏。</li><li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。</li></ol><h5 id="强制-Package在实现时，内部模块的-require-必须使用-relative-id。"><a href="#强制-Package在实现时，内部模块的-require-必须使用-relative-id。" class="headerlink" title="[强制] Package在实现时，内部模块的 require 必须使用 relative id。"></a>[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5><p>解释：</p><p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-不会被调用的依赖模块，在-factory-开始处统一-require。"><a href="#建议-不会被调用的依赖模块，在-factory-开始处统一-require。" class="headerlink" title="[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。"></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5><p>解释：</p><p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'css!foo.css'</span>);</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'tpl!bar.tpl.html'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-2-DOM"><a href="#4-2-DOM" class="headerlink" title="4.2 DOM"></a>4.2 DOM</h3><h4 id="4-2-1-元素获取"><a href="#4-2-1-元素获取" class="headerlink" title="4.2.1 元素获取"></a>4.2.1 元素获取</h4><h5 id="建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。"><a href="#建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。" class="headerlink" title="[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用document.all。"></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5><h5 id="建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。"><a href="#建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。" class="headerlink" title="[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。"></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5><h5 id="建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"><a href="#建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。" class="headerlink" title="[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5><p>解释：</p><p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 显示为 DIV</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = elements[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.insertBefore(p, div);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 显示为 P</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"><a href="#建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。" class="headerlink" title="[建议] 获取元素的直接子元素时使用 children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5><h4 id="4-2-2-样式获取"><a href="#4-2-2-样式获取" class="headerlink" title="4.2.2 样式获取"></a>4.2.2 样式获取</h4><h5 id="建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。"><a href="#建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。" class="headerlink" title="[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle。"></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5><p>解释：</p><p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p><h4 id="4-2-3-样式设置"><a href="#4-2-3-样式设置" class="headerlink" title="4.2.3 样式设置"></a>4.2.3 样式设置</h4><h5 id="建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。"><a href="#建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。" class="headerlink" title="[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。"></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5><h5 id="强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。"><a href="#强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。" class="headerlink" title="[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。"></a>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5><p>解释：</p><p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p><h4 id="4-2-4-DOM-操作"><a href="#4-2-4-DOM-操作" class="headerlink" title="4.2.4 DOM 操作"></a>4.2.4 DOM 操作</h4><h5 id="建议-操作-DOM-时，尽量减少页面-reflow。"><a href="#建议-操作-DOM-时，尽量减少页面-reflow。" class="headerlink" title="[建议] 操作 DOM 时，尽量减少页面 reflow。"></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5><p>解释：</p><p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p><ul><li>DOM元素的添加、修改（内容）、删除。</li><li>应用新的样式或者修改任何影响元素布局的属性。</li><li>Resize浏览器窗口、滚动页面。</li><li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li></ul><h5 id="建议-尽量减少-DOM-操作。"><a href="#建议-尽量减少-DOM-操作。" class="headerlink" title="[建议] 尽量减少 DOM 操作。"></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5><p>解释：</p><p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p><ol><li>在循环体中 createElement 并 append 到父元素中。</li><li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li></ol><p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p><h4 id="4-2-5-DOM-事件"><a href="#4-2-5-DOM-事件" class="headerlink" title="4.2.5 DOM 事件"></a>4.2.5 DOM 事件</h4><h5 id="建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。"><a href="#建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。" class="headerlink" title="[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。"></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5><p>解释：</p><p>expando 属性绑定事件容易导致互相覆盖。</p><h5 id="建议-使用-addEventListener-时第三个参数使用-false。"><a href="#建议-使用-addEventListener-时第三个参数使用-false。" class="headerlink" title="[建议] 使用 addEventListener 时第三个参数使用 false。"></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5><p>解释：</p><p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p><h5 id="建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"><a href="#建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。" class="headerlink" title="[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文来自百度代码规范。值得借鉴。&lt;/p&gt;&lt;h1 id=&quot;JavaScript编码规范&quot;&gt;&lt;a href=&quot;#JavaScript编码规范&quot; class=&quot;headerlink&quot; title=&quot;JavaScript编码规范&quot;&gt;&lt;/a&gt;JavaScript编码规范&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;#1-%E5%89%8D%E8%A8%80&quot;&gt;1 前言&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC&quot;&gt;2 代码风格&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#21-%E6%96%87%E4%BB%B6&quot;&gt;2.1 文件&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#22-%E7%BB%93%E6%9E%84&quot;&gt;2.2 结构&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#221-%E7%BC%A9%E8%BF%9B&quot;&gt;2.2.1 缩进&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#222-%E7%A9%BA%E6%A0%BC&quot;&gt;2.2.2 空格&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#223-%E6%8D%A2%E8%A1%8C&quot;&gt;2.2.3 换行&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#224-%E8%AF%AD%E5%8F%A5&quot;&gt;2.2.4 语句&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="代码规范" scheme="https://algate.coding.me/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 - postMessage</title>
    <link href="https://algate.coding.me/2018/05/25/HTML5-postMessage/"/>
    <id>https://algate.coding.me/2018/05/25/HTML5-postMessage/</id>
    <published>2018-05-25T07:17:30.000Z</published>
    <updated>2019-02-27T03:27:59.551Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
      <category term="HTML5" scheme="https://algate.coding.me/categories/HTML5/"/>
    
    
      <category term="postMessage" scheme="https://algate.coding.me/tags/postMessage/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 - 新增标签和删除的标签</title>
    <link href="https://algate.coding.me/2018/05/25/HTML5-%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%A0%E9%99%A4%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
    <id>https://algate.coding.me/2018/05/25/HTML5-新增标签和删除的标签/</id>
    <published>2018-05-25T07:17:30.000Z</published>
    <updated>2019-02-27T03:27:59.555Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p><strong>* 一、新增标签<br>**</strong> 结构标签</p><p>相当于有意义的div标签<br>article：用于定义一篇文章<br>header：定义页面的头部<br>footer：<br>nav：导航条链接<br>section：定义一个区域<br>aside：定义页面内容的侧边栏<br>hgroup：定义文件中一个区块的相关信息<br>figure：定义一组媒体内容以及它们的标题（可以用于包裹canvas，video等多媒体标签）<br>figcaption：用于figure标签内定义媒体的标题<br>footer：定义一个页面区域的底部<br>dialog：定义一个对话框（例如微信的对话框）<br>补充一：header/section/footer/aside/article/footer这几个标签最好不要嵌套在里面，放在最外边<br>补充二：使用层级(header=section=footer：写在外层)&gt;(aside/article/figure/hgroup/nav：写在内层)<br><a id="more"></a><br><em>**</em> 多媒体标签</p><p><strong>*</strong> 第一类</p><p>video：定义一个视频<br>video标签和audio标签使用差不多<br>1.autoplay：是否自动播放<br>2.controls：是否展示控制器<br>4.可以用css控制视频框的宽度和高度<br>3.可以包裹source标签</p><p>audio：定义一个音频<br>1.autoplay：是否自动播放（autoplay=”autoplay”：自动播放，不写则默认不自动播放）<br>2.loop：是否重复以及重复几次（loop=’-1’时无限重复，=数字时重复数字次数）<br>3.controls：是否显示控制器（controls=”controls”时显示，不写则默认不显示）<br>4.可以包裹source标签</p><p>source：定义媒体资源<br>可以用于audio和video标签内部，并且可以添加不同格式的媒体文件，type属性用于填写转码格式，如下：</p><p><strong>*</strong> 第二类</p><p>canvas（图片标签）：定义图片</p><p><strong>*</strong> 第三类</p><p>embed：定义外部可交互内容和插件，例如flash<br>使用方法和audio和video标签类似<br>1.可以使用css控制资源显示的大小</p><p><strong><strong>Web应用标签<br>*</strong></strong> 第一类：状态标签<br><strong>**</strong> meter：实时状态显示：气压、气温等（目前只支持谷歌和opera）<br>属性：<br>1.value：定义目前所处状态（数值）<br>2.min：最低数值<br>3.max：最高数值<br>4.low：最低显示（低于该值为为黄色）<br>5.high：最高显示（高于该值为黄色）<br>6.optimum：最优值</p><p>用法一</p><meter value="220" min="20" max="380" low="200" high="240" optimum="220"></meter><pre><code>&lt;meter value=&apos;220&apos; min=&apos;20&apos; max=&apos;380&apos; low=&apos;200&apos; high=&apos;240&apos; optimum=&apos;220&apos;&gt;&lt;/meter&gt;</code></pre><meter value="0.75">75%</meter><pre><code>&lt;meter value=&apos;0.75&apos;&gt;75%&lt;/meter&gt;</code></pre><p><strong>**</strong> progress：显示任务过程：安装、加载等（目前只支持谷歌，火狐和opera）<br>属性<br>1.value：当前的状态值<br>2.max：最大状态值</p><p>用法一：显示正在加载状态</p><p><em>**</em> 列表标签</p><p><strong>*</strong> datalist：为input标签定义一个下拉列表，配合option（兼容火狐和谷歌）<br>用法：input标签中的list属性的值和datalist标签中的id必须相同，才能进行下拉拓展</p><pre><code>&lt;input type=&quot;text&quot; placeholder=&quot;111&quot; list=&apos;phonelist&apos;&gt; &lt;datalist id=&quot;phonelist&quot;&gt; &lt;option value=&quot;三星&quot;&gt;&lt;/option&gt; &lt;option value=&quot;华为&quot;&gt;&lt;/option&gt; &lt;option value=&quot;苹果&quot;&gt;&lt;/option&gt; &lt;option value=&quot;小米&quot;&gt;&lt;/option&gt; &lt;option value=&quot;大春&quot;&gt;&lt;/option&gt; &lt;/datalist&gt;</code></pre><p><strong>*</strong> details：定义一个元素的详细内容，配合summary标签，用于展示省略的信息（兼容谷歌和其他一些高版本浏览器）<br>用法：</p><p>另外可以配合summary标签修改标题的显示</p><details><br><summary>很多的a</summary><br></details><p><strong>*</strong> Menu标签（很多浏览器都不支持，建议少用或不用）</p><p>menu：命令列表<br>menuitem：menu命令列表标签（只有火狐8.0以上支持）<br>command：menu标签定义的一个命令按钮（只有IE9支持，以上或以下都不支持）</p><p><strong>*</strong> 注释标签（不是平时的注释，这个标签主要用于类似注释拼音之类，会显示出来）<br>ruby和rt标签<br>用法：用ruby标签将字括起来，然后rt标签填写注释信息</p><pre><code>&lt;p&gt;注&lt;ruby&gt;释&lt;rt&gt;shi&lt;/rt&gt;&lt;/ruby&gt;标签&lt;/p&gt;</code></pre><p>mark：用于标黄（所有主流浏览器都支持，IE要9以上）</p><pre><code>&lt;p&gt;&lt;mark&gt;aaaaa&lt;/mark&gt;aaaaa&lt;/p&gt;</code></pre><p>*** 三、使用HTML5新标签进行布局的意义</p><p>1.提升语义化特性和网页的质量<br>2.减少了用于css调用的class和id属性<br>3.对搜索引擎更友好</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;* 一、新增标签&lt;br&gt;**&lt;/strong&gt; 结构标签&lt;/p&gt;&lt;p&gt;相当于有意义的div标签&lt;br&gt;article：用于定义一篇文章&lt;br&gt;header：定义页面的头部&lt;br&gt;footer：&lt;br&gt;nav：导航条链接&lt;br&gt;section：定义一个区域&lt;br&gt;aside：定义页面内容的侧边栏&lt;br&gt;hgroup：定义文件中一个区块的相关信息&lt;br&gt;figure：定义一组媒体内容以及它们的标题（可以用于包裹canvas，video等多媒体标签）&lt;br&gt;figcaption：用于figure标签内定义媒体的标题&lt;br&gt;footer：定义一个页面区域的底部&lt;br&gt;dialog：定义一个对话框（例如微信的对话框）&lt;br&gt;补充一：header/section/footer/aside/article/footer这几个标签最好不要嵌套在里面，放在最外边&lt;br&gt;补充二：使用层级(header=section=footer：写在外层)&amp;gt;(aside/article/figure/hgroup/nav：写在内层)&lt;br&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://algate.coding.me/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="https://algate.coding.me/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>2018最新学习 - 持续更新ing</title>
    <link href="https://algate.coding.me/2018/05/19/2018%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6%E5%86%85%E5%AE%B9/"/>
    <id>https://algate.coding.me/2018/05/19/2018最新研究内容/</id>
    <published>2018-05-19T01:56:30.000Z</published>
    <updated>2019-02-27T03:27:59.517Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><blockquote><blockquote><blockquote><p>持续更新… 未完待续…</p></blockquote></blockquote></blockquote><p>1.Fetch <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a><br><a href="http://taobaofed.org/blog/2016/03/09/server-in-front-end/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/03/09/server-in-front-end/</a></p><pre><code>&lt;!-- fetchApi.js --&gt;eg：import { baseURL } from &apos;config/GlobalConfig&apos;;    let fetchApi = (url, type, params) =&gt; {        return fetch(`${baseURL + url}`, {method: type, body: JSON.stringify(params)}).then(            response =&gt; response.json()        ).catch(error =&gt; console.error(&apos;Error:&apos;, error));    };    export default fetchApi;&lt;!-- html --&gt;引用: import fetchApi from &apos;fetchApi.js&apos;;fetchApi(&apos;url&apos;, &apos;get/post/put/delete…&apos;, params).then((r) =&gt; {    console.log(r)})</code></pre><a id="more"></a><p>2.ES6 <a href="http://es6.ruanyifeng.com/#docs/object" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/object</a><br>—-ES6-进阶 <a href="http://taobaofed.org/blog/2016/11/03/es6-advanced/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/11/03/es6-advanced/</a></p><p>3.React - 组件间通信 <a href="http://taobaofed.org/blog/2016/11/17/react-components-communication/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/11/17/react-components-communication/</a></p><p>4.TypeScript <a href="https://www.tslang.cn/samples/index.html" target="_blank" rel="noopener">https://www.tslang.cn/samples/index.html</a></p><p>5.WebAssembly <a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/WebAssembly</a></p><p>6.&lt;&lt;数据结构与算法JavaScript描述&gt;&gt; – 吸毒并且敲一遍代码-反复理解和记忆。</p><p>7.&lt;&lt;微信小程序实战入门&gt;&gt; – 写一个属于自己的小程序…</p><p>8.wepy熟悉和使用</p><p>9.webRTC 是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。WebRTC包含的这些标准使用户在无需安装任何插件或者第三方的软件的情况下，创建点对点（Peer-to-Peer）的数据分享和电话会议成为可能。</p><p>10.mvvm框架实现-vue源码解读<a href="https://zhuanlan.zhihu.com/p/27028242" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27028242</a></p><p>11.es6全面分析和精通 <a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">http://es6.ruanyifeng.com</a></p><p>12.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;持续更新… 未完待续…&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p&gt;1.Fetch &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://taobaofed.org/blog/2016/03/09/server-in-front-end/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://taobaofed.org/blog/2016/03/09/server-in-front-end/&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- fetchApi.js --&amp;gt;
eg：import { baseURL } from &amp;apos;config/GlobalConfig&amp;apos;;
    let fetchApi = (url, type, params) =&amp;gt; {
        return fetch(`${baseURL + url}`, {method: type, body: JSON.stringify(params)}).then(
            response =&amp;gt; response.json()
        ).catch(error =&amp;gt; console.error(&amp;apos;Error:&amp;apos;, error));
    };
    export default fetchApi;
&amp;lt;!-- html --&amp;gt;
引用: import fetchApi from &amp;apos;fetchApi.js&amp;apos;;
fetchApi(&amp;apos;url&amp;apos;, &amp;apos;get/post/put/delete…&amp;apos;, params).then((r) =&amp;gt; {
    console.log(r)
})
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="其他" scheme="https://algate.coding.me/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="前端最新知识" scheme="https://algate.coding.me/tags/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>React-单页面路由创建</title>
    <link href="https://algate.coding.me/2018/05/17/React-%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E5%88%9B%E5%BB%BA/"/>
    <id>https://algate.coding.me/2018/05/17/React-单页面路由创建/</id>
    <published>2018-05-17T12:30:30.000Z</published>
    <updated>2019-02-27T03:27:59.602Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>react 渲染路由的方法：<br>HashRouter hash实现路由<br>BrowserRouter H5 Api实现路由跳转</p><p>addEventListener(‘hashchange’);</p><p>histor.pushState({p:path})<br>add(‘popstate’, e =&gt; {</p><p>})</p><p>context.js</p><p>HashRouter.js<br>新增的方法：</p><p>{Provider , Consumer} React.createContext();<br>export {Provider, Consumer}</p><p>export default class HashRouter extends Component{<br>constructor(){<br>super();<br>}<br>}</p><p>Route.js<br>return<comsumer><br>{state=&gt;{</comsumer></p><pre><code>}}</code></pre><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;react 渲染路由的方法：&lt;br&gt;HashRouter hash实现路由&lt;br&gt;BrowserRouter H5 Api实现路由跳转&lt;/p&gt;&lt;
      
    
    </summary>
    
      <category term="React" scheme="https://algate.coding.me/categories/React/"/>
    
    
      <category term="react路由" scheme="https://algate.coding.me/tags/react%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>把内容复制到粘贴板</title>
    <link href="https://algate.coding.me/2018/05/17/JS%E8%BF%9B%E9%98%B6-%E5%A4%8D%E5%88%B6%E5%88%B0%E7%B2%98%E8%B4%B4%E6%9D%BF/"/>
    <id>https://algate.coding.me/2018/05/17/JS进阶-复制到粘贴板/</id>
    <published>2018-05-17T10:02:30.000Z</published>
    <updated>2019-03-14T06:12:41.379Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>需求: 点击按钮 复制 一部分不相关的文字内容 到粘贴板<br>// 复制到粘贴板<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">copyTextToClipboard(text) &#123;</span><br><span class="line">    <span class="keyword">var</span> textArea = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</span><br><span class="line">    textArea.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">    textArea.style.top = <span class="number">0</span>;</span><br><span class="line">    textArea.style.left = <span class="number">0</span>;</span><br><span class="line">    textArea.style.width = <span class="string">'2em'</span>;</span><br><span class="line">    textArea.style.height = <span class="string">'2em'</span>;</span><br><span class="line">    textArea.style.padding = <span class="number">0</span>;</span><br><span class="line">    textArea.style.border = <span class="string">'none'</span>;</span><br><span class="line">    textArea.style.outline = <span class="string">'none'</span>;</span><br><span class="line">    textArea.style.boxShadow = <span class="string">'none'</span>;</span><br><span class="line">    textArea.style.background = <span class="string">'transparent'</span>;</span><br><span class="line">    textArea.value = text ? text : <span class="string">''</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(textArea);</span><br><span class="line">    textArea.select();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>) ? <span class="string">'成功'</span> : <span class="string">'失败'</span>;</span><br><span class="line">        <span class="keyword">this</span>.$message.success(<span class="string">'复制'</span> + msg);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'浏览器不支持该功能，sorry！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(textArea);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>这是之前写页面复制到剪贴板，没有问题可以使用！</p><p>直到我写移动端，我的Android手机怎么测试都ok，而玩测试的同学一本正经的跟我说不行。bug打开关闭打开，我就纳闷了。</p><p>我找到测试的同学，想让复现一下。当同学拿出她硕大的iPhone 6/7/8/x*(不知道是什么型号)，我说不用复现了，我先回去看看。</p><p>fu*k，ie的bug时代结束了，迎来的是ios的bug！</p><p>直接上代码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"copy"</span> style=<span class="string">"margin:20px;padding:8px;font-size:16px;"</span>&gt;敢玩我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">function copyTextToClipboard(text) &#123;</span></span><br><span class="line"><span class="string">    var textArea = document.createElement('textarea');</span></span><br><span class="line"><span class="string">    textArea.style.position = 'fixed';</span></span><br><span class="line"><span class="string">    textArea.style.top = 0;</span></span><br><span class="line"><span class="string">    textArea.style.left = 0;</span></span><br><span class="line"><span class="string">    textArea.style.width = '2em';</span></span><br><span class="line"><span class="string">    textArea.style.height = '2em';</span></span><br><span class="line"><span class="string">    textArea.style.padding = 0;</span></span><br><span class="line"><span class="string">    textArea.style.border = 'none';</span></span><br><span class="line"><span class="string">    textArea.style.outline = 'none';</span></span><br><span class="line"><span class="string">    textArea.style.boxShadow = 'none';</span></span><br><span class="line"><span class="string">    textArea.style.background = 'transparent';</span></span><br><span class="line"><span class="string">    textArea.value = text ? text : "</span>what<span class="string">'s copyed?";</span></span><br><span class="line"><span class="string">    document.body.appendChild(textArea);</span></span><br><span class="line"><span class="string">    if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) &#123;//区分iPhone设备</span></span><br><span class="line"><span class="string">      window.getSelection().removeAllRanges();//这段代码必须放在前面否则无效</span></span><br><span class="line"><span class="string">      // var Url2=document.getElementById("biaoios");//要复制文字的节点</span></span><br><span class="line"><span class="string">      var range = document.createRange();</span></span><br><span class="line"><span class="string">      // 选中需要复制的节点</span></span><br><span class="line"><span class="string">      range.selectNode(textArea);</span></span><br><span class="line"><span class="string">      // 执行选中元素</span></span><br><span class="line"><span class="string">      window.getSelection().addRange(range);</span></span><br><span class="line"><span class="string">      // 执行 copy 操作</span></span><br><span class="line"><span class="string">      var successful = document.execCommand('</span>copy<span class="string">');</span></span><br><span class="line"><span class="string">      // 移除选中的元素</span></span><br><span class="line"><span class="string">      window.getSelection().removeAllRanges();</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      textArea.select();</span></span><br><span class="line"><span class="string">      var msg = document.execCommand("Copy");</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    document.body.removeChild(textArea);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line">document.querySelector('#copy').onclick = function()&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'敢玩我？'</span>;</span><br><span class="line">    copyTextToClipboard(str);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;需求: 点击按钮 复制 一部分不相关的文字内容 到粘贴板&lt;br&gt;// 复制到粘贴板&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;copyTextToClipboard(text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; textArea = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;textarea&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.position = &lt;span class=&quot;string&quot;&gt;&#39;fixed&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.top = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.left = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.width = &lt;span class=&quot;string&quot;&gt;&#39;2em&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.height = &lt;span class=&quot;string&quot;&gt;&#39;2em&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.padding = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.border = &lt;span class=&quot;string&quot;&gt;&#39;none&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.outline = &lt;span class=&quot;string&quot;&gt;&#39;none&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.boxShadow = &lt;span class=&quot;string&quot;&gt;&#39;none&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.style.background = &lt;span class=&quot;string&quot;&gt;&#39;transparent&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.value = text ? text : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    textArea.select();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; msg = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.execCommand(&lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&#39;成功&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;失败&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$message.success(&lt;span class=&quot;string&quot;&gt;&#39;复制&#39;&lt;/span&gt; + msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;浏览器不支持该功能，sorry！&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.removeChild(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="复制内容" scheme="https://algate.coding.me/tags/%E5%A4%8D%E5%88%B6%E5%86%85%E5%AE%B9/"/>
    
      <category term="粘贴板" scheme="https://algate.coding.me/tags/%E7%B2%98%E8%B4%B4%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Vue中CropperJs图片裁切功能实现</title>
    <link href="https://algate.coding.me/2018/05/16/Vue-CropperJs%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://algate.coding.me/2018/05/16/Vue-CropperJs图片裁切功能实现/</id>
    <published>2018-05-16T06:01:30.000Z</published>
    <updated>2019-02-27T03:27:59.620Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --><p>页面html代码：</p><pre><code>&lt;div&gt;    &lt;el-button class=&quot;mt_10&quot; type=&quot;primary&quot; size=&quot;small&quot; onclick=&quot;chooseSeat.click()&quot;&gt;选择文件&lt;/el-button&gt;    &lt;input id=&quot;chooseSeat&quot; name=&quot;files&quot; style=&quot;display:none;&quot; type=&quot;file&quot; @change=&quot;onFileSelect()&quot; accept=&quot;image/png,image/jpeg,image/jpg&quot;/&gt;    &lt;div style=&quot;width: 480px;min-height:280px;background: #ccc;margin-top:10px;margin-bottom: 10px;&quot;&gt;        &lt;div style=&quot;width: 100%;min-height:100%;background: #ccc;&quot;&gt;            &lt;img id=&quot;Img_uploadImg&quot; style=&quot;max-width: 100%;&quot; alt=&quot;原始图&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div style=&quot;margin-bottom: 10px;&quot;&gt;        &lt;img :src=&quot;Img_cropperImg&quot; style=&quot;width:120px;height:120px;background: #ccc;&quot; alt=&quot;裁切图&quot;&gt;    &lt;/div&gt;    &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;J_savePortrait&quot;&gt;保存&lt;/el-button&gt;    &lt;a :href=&quot;Img_download&quot; download=&quot;头像&quot;&gt;&lt;/a&gt;&lt;/div&gt;</code></pre><a id="more"></a><p>首先需要引入cropperjs;</p><pre><code>import Cropper from &apos;cropperjs&apos;;</code></pre><p>script:</p><pre><code>data () {    return {        files: {},        Img_cropperImg: &apos;&apos;,        cropper: null,        Img_download: &apos;&apos;    };},</code></pre><p>选择文件方法：</p><pre><code>onFileSelect() {    let v = this;    let oFiles = document.querySelector(&apos;#chooseSeat&apos;).files;    this.files = oFiles[0];    let reader = new FileReader();    reader.onload = function (e) {        console.log(e);        document.querySelector(&apos;#Img_uploadImg&apos;).src = e.target.result;        let src = e.target.result;        if (this.cropper) {            v.cropper.destroy();        }        v.startCropper(src);    };    reader.readAsDataURL(this.files);    // this.ImguploadImg = URL.createObjectURL(this.files); // 可以转化为blob文件}</code></pre><pre><code>startCropper(src) {        let v = this;        var image = document.getElementById(&apos;Img_uploadImg&apos;);        this.cropper = new Cropper(image, {            aspectRatio: 1 / 1,            ready: function (e) {                console.log(e.type);            },            cropstart: function (e) {                console.log(e.type, e.detail.action);            },            cropmove: function (e) {                console.log(e.type, e.detail.action);            },            cropend: function (e) {                console.log(e.type, e.detail.action);            },            crop: function (e) {                let src = this.cropper.getCroppedCanvas({width: 120, height: 120}).toDataURL(&apos;image/png&apos;);                v.Img_cropperImg = src;                this.cropper.getCroppedCanvas({width: 120, height: 120}).toBlob((blob) =&gt; {                    v.Img_download = blob;                });            },            zoom: function (e) {                console.log(e.type, e.detail.ratio);            }        });    },</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:02 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;页面html代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;el-button class=&amp;quot;mt_10&amp;quot; type=&amp;quot;primary&amp;quot; size=&amp;quot;small&amp;quot; onclick=&amp;quot;chooseSeat.click()&amp;quot;&amp;gt;选择文件&amp;lt;/el-button&amp;gt;
    &amp;lt;input id=&amp;quot;chooseSeat&amp;quot; name=&amp;quot;files&amp;quot; style=&amp;quot;display:none;&amp;quot; type=&amp;quot;file&amp;quot; @change=&amp;quot;onFileSelect()&amp;quot; accept=&amp;quot;image/png,image/jpeg,image/jpg&amp;quot;/&amp;gt;
    &amp;lt;div style=&amp;quot;width: 480px;min-height:280px;background: #ccc;margin-top:10px;margin-bottom: 10px;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;width: 100%;min-height:100%;background: #ccc;&amp;quot;&amp;gt;
            &amp;lt;img id=&amp;quot;Img_uploadImg&amp;quot; style=&amp;quot;max-width: 100%;&amp;quot; alt=&amp;quot;原始图&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div style=&amp;quot;margin-bottom: 10px;&amp;quot;&amp;gt;
        &amp;lt;img :src=&amp;quot;Img_cropperImg&amp;quot; style=&amp;quot;width:120px;height:120px;background: #ccc;&amp;quot; alt=&amp;quot;裁切图&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;el-button type=&amp;quot;primary&amp;quot; size=&amp;quot;small&amp;quot; @click=&amp;quot;J_savePortrait&amp;quot;&amp;gt;保存&amp;lt;/el-button&amp;gt;
    &amp;lt;a :href=&amp;quot;Img_download&amp;quot; download=&amp;quot;头像&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://algate.coding.me/categories/Vue/"/>
    
    
      <category term="cropperJs" scheme="https://algate.coding.me/tags/cropperJs/"/>
    
      <category term="图片裁切" scheme="https://algate.coding.me/tags/%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87/"/>
    
  </entry>
  
  <entry>
    <title>Js - url参数拼接</title>
    <link href="https://algate.coding.me/2018/05/14/Js-URL%E5%8F%82%E6%95%B0%E6%8B%BC%E6%8E%A5/"/>
    <id>https://algate.coding.me/2018/05/14/Js-URL参数拼接/</id>
    <published>2018-05-14T06:36:30.000Z</published>
    <updated>2019-02-27T03:27:59.579Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>url已经带参数还没有带都可以使用<br>url传参以及get请求参数</p><pre><code>paramsJoin(url, params) {    let paramsArray = [];    Object.keys(params).forEach(key =&gt; paramsArray.push(key + &apos;=&apos; + params[key]));    if (url.search(/\?/) === -1) {        url += &apos;?&apos; + paramsArray.join(&apos;&amp;&apos;);    } else {        url += &apos;&amp;&apos; + paramsArray.join(&apos;&amp;&apos;);    }    return url;}</code></pre><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;url已经带参数还没有带都可以使用&lt;br&gt;url传参以及get请求参数&lt;/p&gt;&lt;pre&gt;&lt;code&gt;paramsJoin(url, params) {
    let paramsArray = [];
    Object.keys(params).forEach(key =&amp;gt; paramsArray.push(key + &amp;apos;=&amp;apos; + params[key]));
    if (url.search(/\?/) === -1) {
        url += &amp;apos;?&amp;apos; + paramsArray.join(&amp;apos;&amp;amp;&amp;apos;);
    } else {
        url += &amp;apos;&amp;amp;&amp;apos; + paramsArray.join(&amp;apos;&amp;amp;&amp;apos;);
    }
    return url;
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://algate.coding.me/categories/Javascript/"/>
    
    
      <category term="params" scheme="https://algate.coding.me/tags/params/"/>
    
  </entry>
  
  <entry>
    <title>Diary - 前端星计划三周年庆一天行</title>
    <link href="https://algate.coding.me/2018/05/12/Diary-360%E5%89%8D%E7%AB%AF%E6%98%9F%E8%AE%A1%E5%88%92%E4%B8%89%E5%91%A8%E5%B9%B4%E5%BA%86/"/>
    <id>https://algate.coding.me/2018/05/12/Diary-360前端星计划三周年庆/</id>
    <published>2018-05-11T23:31:30.000Z</published>
    <updated>2019-02-27T03:27:59.530Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --><p>《北京编程梦》 —- Algate</p><p>内容不多，但是收获或多或少还是有的。</p><p>阿里的前端大牛，360事业部的星计划创始人月影…… 请原谅我的记性不是很好。名字可记不住</p><p>从WEB发展历史到WEB发展的现状以及WEB未来的发展方向都有深刻理解；</p><p>微信小程序的火热，以及快应用的诞生，app应用等向跨平台、快启动，免安装等方向发展；</p><p>wepy框架的应用，前端组件化框架，组件等让开发变得越来越方便；</p><p>es6等新规范的诞生，flash即将全面禁用。加入webassembly、媒体资源扩展、webRTC等最新规范。让WEB发展如火如荼，正经历着每天都有新内容的变革。</p><p>市面上出现的许多组件，框架，针对某个应用开发的各种版本应用等等的内容；</p><p>现阶段，web发展给社会进步，市场繁荣也尽了自己的一份力量，web能如此热情高涨的发展下去。</p><p>………</p><p>大家合影留念</p><p>我没有吃蛋糕，360纸水杯作为纪念；<br><a id="more"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 18 2019 18:11:01 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;《北京编程梦》 —- Algate&lt;/p&gt;&lt;p&gt;内容不多，但是收获或多或少还是有的。&lt;/p&gt;&lt;p&gt;阿里的前端大牛，360事业部的星计划创始人月影…… 请原谅我的记性不是很好。名字可记不住&lt;/p&gt;&lt;p&gt;从WEB发展历史到WEB发展的现状以及WEB未来的发展方向都有深刻理解；&lt;/p&gt;&lt;p&gt;微信小程序的火热，以及快应用的诞生，app应用等向跨平台、快启动，免安装等方向发展；&lt;/p&gt;&lt;p&gt;wepy框架的应用，前端组件化框架，组件等让开发变得越来越方便；&lt;/p&gt;&lt;p&gt;es6等新规范的诞生，flash即将全面禁用。加入webassembly、媒体资源扩展、webRTC等最新规范。让WEB发展如火如荼，正经历着每天都有新内容的变革。&lt;/p&gt;&lt;p&gt;市面上出现的许多组件，框架，针对某个应用开发的各种版本应用等等的内容；&lt;/p&gt;&lt;p&gt;现阶段，web发展给社会进步，市场繁荣也尽了自己的一份力量，web能如此热情高涨的发展下去。&lt;/p&gt;&lt;p&gt;………&lt;/p&gt;&lt;p&gt;大家合影留念&lt;/p&gt;&lt;p&gt;我没有吃蛋糕，360纸水杯作为纪念；&lt;br&gt;
    
    </summary>
    
      <category term="日记" scheme="https://algate.coding.me/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="前端星计划" scheme="https://algate.coding.me/tags/%E5%89%8D%E7%AB%AF%E6%98%9F%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
</feed>
